{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "train=pd.read_csv('train.csv')\n",
    "test=pd.read_csv('test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>1456</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>175000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>1457</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>210000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>1458</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GdPrv</td>\n",
       "      <td>Shed</td>\n",
       "      <td>2500</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>266500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>1459</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>142125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>1460</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>147500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "1455  1456          60       RL         62.0     7917   Pave   NaN      Reg   \n",
       "1456  1457          20       RL         85.0    13175   Pave   NaN      Reg   \n",
       "1457  1458          70       RL         66.0     9042   Pave   NaN      Reg   \n",
       "1458  1459          20       RL         68.0     9717   Pave   NaN      Reg   \n",
       "1459  1460          20       RL         75.0     9937   Pave   NaN      Reg   \n",
       "\n",
       "     LandContour Utilities    ...     PoolArea PoolQC  Fence MiscFeature  \\\n",
       "1455         Lvl    AllPub    ...            0    NaN    NaN         NaN   \n",
       "1456         Lvl    AllPub    ...            0    NaN  MnPrv         NaN   \n",
       "1457         Lvl    AllPub    ...            0    NaN  GdPrv        Shed   \n",
       "1458         Lvl    AllPub    ...            0    NaN    NaN         NaN   \n",
       "1459         Lvl    AllPub    ...            0    NaN    NaN         NaN   \n",
       "\n",
       "     MiscVal MoSold YrSold  SaleType  SaleCondition  SalePrice  \n",
       "1455       0      8   2007        WD         Normal     175000  \n",
       "1456       0      2   2010        WD         Normal     210000  \n",
       "1457    2500      5   2010        WD         Normal     266500  \n",
       "1458       0      4   2010        WD         Normal     142125  \n",
       "1459       0      6   2008        WD         Normal     147500  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1201.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1452.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>56.897260</td>\n",
       "      <td>70.049958</td>\n",
       "      <td>10516.828082</td>\n",
       "      <td>6.099315</td>\n",
       "      <td>5.575342</td>\n",
       "      <td>1971.267808</td>\n",
       "      <td>1984.865753</td>\n",
       "      <td>103.685262</td>\n",
       "      <td>443.639726</td>\n",
       "      <td>...</td>\n",
       "      <td>94.244521</td>\n",
       "      <td>46.660274</td>\n",
       "      <td>21.954110</td>\n",
       "      <td>3.409589</td>\n",
       "      <td>15.060959</td>\n",
       "      <td>2.758904</td>\n",
       "      <td>43.489041</td>\n",
       "      <td>6.321918</td>\n",
       "      <td>2007.815753</td>\n",
       "      <td>180921.195890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>421.610009</td>\n",
       "      <td>42.300571</td>\n",
       "      <td>24.284752</td>\n",
       "      <td>9981.264932</td>\n",
       "      <td>1.382997</td>\n",
       "      <td>1.112799</td>\n",
       "      <td>30.202904</td>\n",
       "      <td>20.645407</td>\n",
       "      <td>181.066207</td>\n",
       "      <td>456.098091</td>\n",
       "      <td>...</td>\n",
       "      <td>125.338794</td>\n",
       "      <td>66.256028</td>\n",
       "      <td>61.119149</td>\n",
       "      <td>29.317331</td>\n",
       "      <td>55.757415</td>\n",
       "      <td>40.177307</td>\n",
       "      <td>496.123024</td>\n",
       "      <td>2.703626</td>\n",
       "      <td>1.328095</td>\n",
       "      <td>79442.502883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>365.750000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7553.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1954.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>129975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>9478.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1994.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>383.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1095.250000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11601.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>712.250000</td>\n",
       "      <td>...</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>214000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>547.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>738.000000</td>\n",
       "      <td>15500.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\n",
       "count  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \n",
       "mean    730.500000    56.897260    70.049958   10516.828082     6.099315   \n",
       "std     421.610009    42.300571    24.284752    9981.264932     1.382997   \n",
       "min       1.000000    20.000000    21.000000    1300.000000     1.000000   \n",
       "25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n",
       "50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n",
       "75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \n",
       "max    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n",
       "\n",
       "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  \\\n",
       "count  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000   \n",
       "mean      5.575342  1971.267808   1984.865753   103.685262   443.639726   \n",
       "std       1.112799    30.202904     20.645407   181.066207   456.098091   \n",
       "min       1.000000  1872.000000   1950.000000     0.000000     0.000000   \n",
       "25%       5.000000  1954.000000   1967.000000     0.000000     0.000000   \n",
       "50%       5.000000  1973.000000   1994.000000     0.000000   383.500000   \n",
       "75%       6.000000  2000.000000   2004.000000   166.000000   712.250000   \n",
       "max       9.000000  2010.000000   2010.000000  1600.000000  5644.000000   \n",
       "\n",
       "           ...         WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  \\\n",
       "count      ...        1460.000000  1460.000000    1460.000000  1460.000000   \n",
       "mean       ...          94.244521    46.660274      21.954110     3.409589   \n",
       "std        ...         125.338794    66.256028      61.119149    29.317331   \n",
       "min        ...           0.000000     0.000000       0.000000     0.000000   \n",
       "25%        ...           0.000000     0.000000       0.000000     0.000000   \n",
       "50%        ...           0.000000    25.000000       0.000000     0.000000   \n",
       "75%        ...         168.000000    68.000000       0.000000     0.000000   \n",
       "max        ...         857.000000   547.000000     552.000000   508.000000   \n",
       "\n",
       "       ScreenPorch     PoolArea       MiscVal       MoSold       YrSold  \\\n",
       "count  1460.000000  1460.000000   1460.000000  1460.000000  1460.000000   \n",
       "mean     15.060959     2.758904     43.489041     6.321918  2007.815753   \n",
       "std      55.757415    40.177307    496.123024     2.703626     1.328095   \n",
       "min       0.000000     0.000000      0.000000     1.000000  2006.000000   \n",
       "25%       0.000000     0.000000      0.000000     5.000000  2007.000000   \n",
       "50%       0.000000     0.000000      0.000000     6.000000  2008.000000   \n",
       "75%       0.000000     0.000000      0.000000     8.000000  2009.000000   \n",
       "max     480.000000   738.000000  15500.000000    12.000000  2010.000000   \n",
       "\n",
       "           SalePrice  \n",
       "count    1460.000000  \n",
       "mean   180921.195890  \n",
       "std     79442.502883  \n",
       "min     34900.000000  \n",
       "25%    129975.000000  \n",
       "50%    163000.000000  \n",
       "75%    214000.000000  \n",
       "max    755000.000000  \n",
       "\n",
       "[8 rows x 38 columns]"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [],
   "source": [
    "test['SalePrice']=0\n",
    "train['source']='train'\n",
    "test['source']='test'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([train, test], ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>source</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2914</th>\n",
       "      <td>2915</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1936</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>2916</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1894</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2916</th>\n",
       "      <td>2917</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>160.0</td>\n",
       "      <td>20000</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2917</th>\n",
       "      <td>2918</td>\n",
       "      <td>85</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>10441</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>Shed</td>\n",
       "      <td>700</td>\n",
       "      <td>7</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2918</th>\n",
       "      <td>2919</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>9627</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 82 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "2914  2915         160       RM         21.0     1936   Pave   NaN      Reg   \n",
       "2915  2916         160       RM         21.0     1894   Pave   NaN      Reg   \n",
       "2916  2917          20       RL        160.0    20000   Pave   NaN      Reg   \n",
       "2917  2918          85       RL         62.0    10441   Pave   NaN      Reg   \n",
       "2918  2919          60       RL         74.0     9627   Pave   NaN      Reg   \n",
       "\n",
       "     LandContour Utilities   ...   PoolQC  Fence MiscFeature MiscVal MoSold  \\\n",
       "2914         Lvl    AllPub   ...      NaN    NaN         NaN       0      6   \n",
       "2915         Lvl    AllPub   ...      NaN    NaN         NaN       0      4   \n",
       "2916         Lvl    AllPub   ...      NaN    NaN         NaN       0      9   \n",
       "2917         Lvl    AllPub   ...      NaN  MnPrv        Shed     700      7   \n",
       "2918         Lvl    AllPub   ...      NaN    NaN         NaN       0     11   \n",
       "\n",
       "     YrSold SaleType  SaleCondition  SalePrice  source  \n",
       "2914   2006       WD         Normal          0    test  \n",
       "2915   2006       WD        Abnorml          0    test  \n",
       "2916   2006       WD        Abnorml          0    test  \n",
       "2917   2006       WD         Normal          0    test  \n",
       "2918   2006       WD         Normal          0    test  \n",
       "\n",
       "[5 rows x 82 columns]"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2433.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2896.000000</td>\n",
       "      <td>2918.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>57.137718</td>\n",
       "      <td>69.305795</td>\n",
       "      <td>10168.114080</td>\n",
       "      <td>6.089072</td>\n",
       "      <td>5.564577</td>\n",
       "      <td>1971.312778</td>\n",
       "      <td>1984.264474</td>\n",
       "      <td>102.201312</td>\n",
       "      <td>441.423235</td>\n",
       "      <td>...</td>\n",
       "      <td>93.709832</td>\n",
       "      <td>47.486811</td>\n",
       "      <td>23.098321</td>\n",
       "      <td>2.602261</td>\n",
       "      <td>16.062350</td>\n",
       "      <td>2.251799</td>\n",
       "      <td>50.825968</td>\n",
       "      <td>6.213087</td>\n",
       "      <td>2007.792737</td>\n",
       "      <td>90491.588215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>842.787043</td>\n",
       "      <td>42.517628</td>\n",
       "      <td>23.344905</td>\n",
       "      <td>7886.996359</td>\n",
       "      <td>1.409947</td>\n",
       "      <td>1.113131</td>\n",
       "      <td>30.291442</td>\n",
       "      <td>20.894344</td>\n",
       "      <td>179.334253</td>\n",
       "      <td>455.610826</td>\n",
       "      <td>...</td>\n",
       "      <td>126.526589</td>\n",
       "      <td>67.575493</td>\n",
       "      <td>64.244246</td>\n",
       "      <td>25.188169</td>\n",
       "      <td>56.184365</td>\n",
       "      <td>35.663946</td>\n",
       "      <td>567.402211</td>\n",
       "      <td>2.714762</td>\n",
       "      <td>1.314964</td>\n",
       "      <td>106496.379333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7478.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1953.500000</td>\n",
       "      <td>1965.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>9453.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1993.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>368.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2189.500000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11570.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2001.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>164.000000</td>\n",
       "      <td>733.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2919.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1424.000000</td>\n",
       "      <td>742.000000</td>\n",
       "      <td>1012.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>576.000000</td>\n",
       "      <td>800.000000</td>\n",
       "      <td>17000.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\n",
       "count  2919.000000  2919.000000  2433.000000    2919.000000  2919.000000   \n",
       "mean   1460.000000    57.137718    69.305795   10168.114080     6.089072   \n",
       "std     842.787043    42.517628    23.344905    7886.996359     1.409947   \n",
       "min       1.000000    20.000000    21.000000    1300.000000     1.000000   \n",
       "25%     730.500000    20.000000    59.000000    7478.000000     5.000000   \n",
       "50%    1460.000000    50.000000    68.000000    9453.000000     6.000000   \n",
       "75%    2189.500000    70.000000    80.000000   11570.000000     7.000000   \n",
       "max    2919.000000   190.000000   313.000000  215245.000000    10.000000   \n",
       "\n",
       "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  \\\n",
       "count  2919.000000  2919.000000   2919.000000  2896.000000  2918.000000   \n",
       "mean      5.564577  1971.312778   1984.264474   102.201312   441.423235   \n",
       "std       1.113131    30.291442     20.894344   179.334253   455.610826   \n",
       "min       1.000000  1872.000000   1950.000000     0.000000     0.000000   \n",
       "25%       5.000000  1953.500000   1965.000000     0.000000     0.000000   \n",
       "50%       5.000000  1973.000000   1993.000000     0.000000   368.500000   \n",
       "75%       6.000000  2001.000000   2004.000000   164.000000   733.000000   \n",
       "max       9.000000  2010.000000   2010.000000  1600.000000  5644.000000   \n",
       "\n",
       "           ...         WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  \\\n",
       "count      ...        2919.000000  2919.000000    2919.000000  2919.000000   \n",
       "mean       ...          93.709832    47.486811      23.098321     2.602261   \n",
       "std        ...         126.526589    67.575493      64.244246    25.188169   \n",
       "min        ...           0.000000     0.000000       0.000000     0.000000   \n",
       "25%        ...           0.000000     0.000000       0.000000     0.000000   \n",
       "50%        ...           0.000000    26.000000       0.000000     0.000000   \n",
       "75%        ...         168.000000    70.000000       0.000000     0.000000   \n",
       "max        ...        1424.000000   742.000000    1012.000000   508.000000   \n",
       "\n",
       "       ScreenPorch     PoolArea       MiscVal       MoSold       YrSold  \\\n",
       "count  2919.000000  2919.000000   2919.000000  2919.000000  2919.000000   \n",
       "mean     16.062350     2.251799     50.825968     6.213087  2007.792737   \n",
       "std      56.184365    35.663946    567.402211     2.714762     1.314964   \n",
       "min       0.000000     0.000000      0.000000     1.000000  2006.000000   \n",
       "25%       0.000000     0.000000      0.000000     4.000000  2007.000000   \n",
       "50%       0.000000     0.000000      0.000000     6.000000  2008.000000   \n",
       "75%       0.000000     0.000000      0.000000     8.000000  2009.000000   \n",
       "max     576.000000   800.000000  17000.000000    12.000000  2010.000000   \n",
       "\n",
       "           SalePrice  \n",
       "count    2919.000000  \n",
       "mean    90491.588215  \n",
       "std    106496.379333  \n",
       "min         0.000000  \n",
       "25%         0.000000  \n",
       "50%     34900.000000  \n",
       "75%    163000.000000  \n",
       "max    755000.000000  \n",
       "\n",
       "[8 rows x 38 columns]"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Missing values handling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PoolQC          0.996574\n",
       "MiscFeature     0.964029\n",
       "Alley           0.932169\n",
       "Fence           0.804385\n",
       "FireplaceQu     0.486468\n",
       "LotFrontage     0.166495\n",
       "GarageFinish    0.054471\n",
       "GarageYrBlt     0.054471\n",
       "GarageQual      0.054471\n",
       "GarageCond      0.054471\n",
       "GarageType      0.053786\n",
       "BsmtExposure    0.028092\n",
       "BsmtCond        0.028092\n",
       "BsmtQual        0.027749\n",
       "BsmtFinType2    0.027407\n",
       "BsmtFinType1    0.027064\n",
       "MasVnrType      0.008222\n",
       "MasVnrArea      0.007879\n",
       "MSZoning        0.001370\n",
       "BsmtFullBath    0.000685\n",
       "BsmtHalfBath    0.000685\n",
       "Utilities       0.000685\n",
       "Functional      0.000685\n",
       "Exterior2nd     0.000343\n",
       "Exterior1st     0.000343\n",
       "SaleType        0.000343\n",
       "BsmtFinSF1      0.000343\n",
       "BsmtFinSF2      0.000343\n",
       "BsmtUnfSF       0.000343\n",
       "Electrical      0.000343\n",
       "KitchenQual     0.000343\n",
       "GarageCars      0.000343\n",
       "GarageArea      0.000343\n",
       "TotalBsmtSF     0.000343\n",
       "dtype: float64"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_na = (df.apply(lambda x : sum(x.isnull()), axis=0)/len(df))\n",
    "df_na[df_na!=0].sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for PoolQC, MiscFeature, Alley, Fence & FireplaceQu null is valid value.\n",
    "# let's replace by 'None'\n",
    "for col in ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu']:\n",
    "    df[col].fillna('None', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['LotFrontage']=df.groupby('Neighborhood')['LotFrontage'].transform(lambda x : x.fillna(x.median()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Id'"
      ]
     },
     "execution_count": 218,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_na.index[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for Lotfrontage missing value we can replace it by median or let's first \n",
    "# see if this is correlated with any other column & on basis of that we \n",
    "#can replace it\n",
    "\n",
    "corrmat=df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xe1dd518>"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nE7SLZ2o3vtaIuDUi/hP4IvDxjPc2ISJ2i4jd9h/x9qovMzMzM/ChzP5QJ6JpRkScR3GIc5eMrtpH\nNN0OfDRFLCHpY8CDEVG5eqakrSRtWdo0Fng2Y0xmZmZmlfTnVZkNj2iKiMslnQ3cKSmAmcA/Z45z\nJPATSWsAS4AnKQ5rmpmZWaM5K7NvRETdvIiIuAi4qM72kaX7p9Z7LiJmAe9s99zPgZ/X6W8asH3p\n8Zn1+o+ISUDdGmsRMb7edjMzM+slTXzYsREcydSH2jJSuWa05GUVbr3ry5Xbvjmj+rd9jQ9VzxIE\nWHBe9V+gLfd5o+tGJfOfrf6ZbLzxm1l937jlepXb3nfu4qy+c/IvR/zPeZXbrjL11qxxTDrmxspt\nd1xUPWcPYPS7q7f/5VN5Gal/nVI9Y3Ho6nm/N4szfienz12t60bJzEF5f1q3GVZ93Hvv9EJW38qI\nJh2yQfXMSYCW1aq3X/X6mXl9D6r+t+T+V0dUbrvJoiVZ41izgas1gzOySWdnZBwDDM3I4dxo3dez\n+rbG8sTMzMzMmtcAWzFripP/zczMzKyBEzNJa5UKr/5D0gulx8strktaU9LxFfodLOm1dP/tkuaX\nMjf/2u4Kyu6OfV9J7yo93kbSbWk/j0j6Wdq+v6TXS+/r+p7u28zMzJaKiIbcmlXDDmWmYqu1LMxT\ngbnlE+zrWBM4nqLqfo7HSpmbXwBOAY7NHvCy9gVeAf6WHp8NnBERf0pFcLcvtb0lIg7u4f7MzMys\nHh/KbDxJJ6cczKmSvpQ2nw5slVaeTpe0uqSbJd0nabKkD1foupy5uYOke1N/kyVtnlbYpkr6VYpY\nuljS+yXdJekJSbtJ2oKipMZJ6bV7UORlTgeIwpTe/1TMzMxsoOvzk/8l7Q4cRVHWYjBwj6RbKVa6\n3l5a/RoCHBwRcyStA/wV+GOdLrdKdctWB4YCu6ft/wqcmWqZDaWolbYRsBXwCeBR4D5gQUTsIenj\nwCkRcaik8ymCy/83jeWHwO2S/kqRnfnLiKhdxrJPqR7bZRFxerv3exyp7tmxo8axn6v/m5mZVecV\ns4bbE/htRMxPOZhXAXvVaSfgdEmTWRokPrpOu8dSTuXmwMksPRR6F/ANSScDG0fEgrT9yYh4OEU5\nPQzclLZ3mLkZEecD2wJXAvsBd5fOk7ullJV5ep3XvhXJ5EmZmZmZdaaZr8o8GhgF7JJW0V4Buiqa\n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\noEGDQYL/A8JjAeO+nzVFAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xe871048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "sns.heatmap(corrmat, square=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AllPub    2916\n",
       "NoSeWa       1\n",
       "Name: Utilities, dtype: int64"
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Utilities'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Utilities have same value so it will not take part in model predictor\n",
    "# still replace by common one\n",
    "df['Utilities'].fillna('AllPub', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VinylSd    0.351148\n",
       "MetalSd    0.154162\n",
       "HdBoard    0.151422\n",
       "Wd Sdng    0.140802\n",
       "Plywood    0.075711\n",
       "CemntBd    0.043165\n",
       "BrkFace    0.029805\n",
       "WdShing    0.019185\n",
       "AsbShng    0.015074\n",
       "Stucco     0.014731\n",
       "BrkComm    0.002055\n",
       "CBlock     0.000685\n",
       "AsphShn    0.000685\n",
       "Stone      0.000685\n",
       "ImStucc    0.000343\n",
       "Name: Exterior1st, dtype: float64"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Exterior1st'].value_counts()/2919"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Exterior1st'].fillna('VinylSd', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Exterior1st_mod']=df['Exterior1st'].apply(lambda x : x if x in ['VinylSd', 'MetalSd', 'HdBoard', 'Wd Sdng'] else 'others')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VinylSd    0.347379\n",
       "MetalSd    0.153135\n",
       "HdBoard    0.139089\n",
       "Wd Sdng    0.133950\n",
       "Plywood    0.092497\n",
       "CmentBd    0.043165\n",
       "Wd Shng    0.027749\n",
       "BrkFace    0.016101\n",
       "Stucco     0.016101\n",
       "AsbShng    0.013018\n",
       "Brk Cmn    0.007537\n",
       "ImStucc    0.005139\n",
       "Stone      0.002055\n",
       "AsphShn    0.001370\n",
       "CBlock     0.001028\n",
       "Other      0.000343\n",
       "Name: Exterior2nd, dtype: float64"
      ]
     },
     "execution_count": 226,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Exterior2nd'].value_counts()/2919"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Exterior2nd'].fillna('VinylSd', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Exterior2nd_mod']=df['Exterior2nd'].apply(lambda x : x if x in ['VinylSd', 'MetalSd', 'HdBoard', 'Wd Sdng'] else 'others')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None       1742\n",
       "BrkFace     879\n",
       "Stone       249\n",
       "BrkCmn       25\n",
       "Name: MasVnrType, dtype: int64"
      ]
     },
     "execution_count": 229,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MasVnrType'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12374400>"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12364710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.boxplot(column='SalePrice', by='MasVnrType')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 24 values of MasVnrType is missing & None is a valid category. let's replace this with None\n",
    "\n",
    "df['MasVnrType'].fillna('None', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x123646d8>"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x123a0f98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['MasVnrArea'].plot(kind='hist', legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xff27c18>"
      ]
     },
     "execution_count": 233,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nWItMAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xff14208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['MasVnrArea'].plot(kind='box', legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xc1c5b70>"
      ]
     },
     "execution_count": 234,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xff24518>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.plot(kind='scatter', x='MasVnrArea', y='SalePrice')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['MasVnrArea'].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TA    1283\n",
       "Gd    1209\n",
       "Ex     258\n",
       "Fa      88\n",
       "Name: BsmtQual, dtype: int64"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['BsmtQual'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BsmtQual        81\n",
       "BsmtCond        82\n",
       "BsmtExposure    82\n",
       "BsmtFinType1    79\n",
       "dtype: int64"
      ]
     },
     "execution_count": 237,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1']].apply(lambda x : sum(x.isnull()), axis=0 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n",
    "    df[col]=df[col].fillna('None')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2918.000000</td>\n",
       "      <td>2918.000000</td>\n",
       "      <td>2918.000000</td>\n",
       "      <td>2918.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>441.423235</td>\n",
       "      <td>49.582248</td>\n",
       "      <td>560.772104</td>\n",
       "      <td>1051.777587</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>455.610826</td>\n",
       "      <td>169.205611</td>\n",
       "      <td>439.543659</td>\n",
       "      <td>440.766258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>220.000000</td>\n",
       "      <td>793.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>368.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>467.000000</td>\n",
       "      <td>989.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>733.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>805.500000</td>\n",
       "      <td>1302.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5644.000000</td>\n",
       "      <td>1526.000000</td>\n",
       "      <td>2336.000000</td>\n",
       "      <td>6110.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        BsmtFinSF1   BsmtFinSF2    BsmtUnfSF  TotalBsmtSF\n",
       "count  2918.000000  2918.000000  2918.000000  2918.000000\n",
       "mean    441.423235    49.582248   560.772104  1051.777587\n",
       "std     455.610826   169.205611   439.543659   440.766258\n",
       "min       0.000000     0.000000     0.000000     0.000000\n",
       "25%       0.000000     0.000000   220.000000   793.000000\n",
       "50%     368.500000     0.000000   467.000000   989.500000\n",
       "75%     733.000000     0.000000   805.500000  1302.000000\n",
       "max    5644.000000  1526.000000  2336.000000  6110.000000"
      ]
     },
     "execution_count": 239,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "# only 1 value is missing let's replace it by 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF']:\n",
    "    df[col].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Heating       0\n",
       "HeatingQC     0\n",
       "CentralAir    0\n",
       "Electrical    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['Heating', 'HeatingQC', 'CentralAir', 'Electrical']].apply(lambda x : sum(x.isnull()), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SBrkr    2671\n",
       "FuseA     188\n",
       "FuseF      50\n",
       "FuseP       8\n",
       "Mix         1\n",
       "Name: Electrical, dtype: int64"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Electrical'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Electrical'].fillna('SBrkr', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1stFlrSF</th>\n",
       "      <th>2ndFlrSF</th>\n",
       "      <th>LowQualFinSF</th>\n",
       "      <th>GrLivArea</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "      <td>2919.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1159.581706</td>\n",
       "      <td>336.483727</td>\n",
       "      <td>4.694416</td>\n",
       "      <td>1500.759849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>392.362079</td>\n",
       "      <td>428.701456</td>\n",
       "      <td>46.396825</td>\n",
       "      <td>506.051045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>334.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>334.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>876.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1126.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1082.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1444.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1387.500000</td>\n",
       "      <td>704.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1743.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5095.000000</td>\n",
       "      <td>2065.000000</td>\n",
       "      <td>1064.000000</td>\n",
       "      <td>5642.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          1stFlrSF     2ndFlrSF  LowQualFinSF    GrLivArea\n",
       "count  2919.000000  2919.000000   2919.000000  2919.000000\n",
       "mean   1159.581706   336.483727      4.694416  1500.759849\n",
       "std     392.362079   428.701456     46.396825   506.051045\n",
       "min     334.000000     0.000000      0.000000   334.000000\n",
       "25%     876.000000     0.000000      0.000000  1126.000000\n",
       "50%    1082.000000     0.000000      0.000000  1444.000000\n",
       "75%    1387.500000   704.000000      0.000000  1743.500000\n",
       "max    5095.000000  2065.000000   1064.000000  5642.000000"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea']].describe()\n",
    "#no missing value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BsmtFullBath    2\n",
       "BsmtHalfBath    2\n",
       "FullBath        0\n",
       "HalfBath        0\n",
       "BedroomAbvGr    0\n",
       "KitchenAbvGr    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr']].apply(lambda x: sum(x.isnull()), axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    1705\n",
       "1.0    1172\n",
       "2.0      38\n",
       "3.0       2\n",
       "Name: BsmtFullBath, dtype: int64"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['BsmtFullBath'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0    2742\n",
       "1.0     171\n",
       "2.0       4\n",
       "Name: BsmtHalfBath, dtype: int64"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['BsmtHalfBath'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in ['BsmtFullBath', 'BsmtHalfBath']:\n",
    "    df[col].fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Typ     2717\n",
       "Min2      70\n",
       "Min1      65\n",
       "Mod       35\n",
       "Maj1      19\n",
       "Maj2       9\n",
       "Sev        2\n",
       "Name: Functional, dtype: int64"
      ]
     },
     "execution_count": 250,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Functional'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Functional'].fillna('Typ', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "# NA is valid value for GarageType, GarageFinish, \n",
    "#let's replace it with NONE\n",
    "for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n",
    "    df[col].fillna('None', inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x124a8d30>"
      ]
     },
     "execution_count": 253,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xff4b7b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['GarageYrBlt'].plot(kind='hist', bins=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [],
   "source": [
    "# GarageYrBlt, how much it is old is better than actual \n",
    "# built year\n",
    "df['GarageYrOld']=2018-df['GarageYrBlt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x121733c8>"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xfe12048>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['GarageYrOld'].hist(bins=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['GarageYrOld'].fillna(df['GarageYrOld'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x121e5320>"
      ]
     },
     "execution_count": 257,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12200b38>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['GarageCars'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1229a4a8>"
      ]
     },
     "execution_count": 258,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12279390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['GarageArea'].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "metadata": {},
   "outputs": [],
   "source": [
    "for col in ['GarageCars', 'GarageArea']:\n",
    "    md=df[col].mode()[0]\n",
    "    df[col].fillna(md, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WD       0.865022\n",
       "New      0.081877\n",
       "COD      0.029805\n",
       "ConLD    0.008907\n",
       "CWD      0.004111\n",
       "ConLI    0.003083\n",
       "ConLw    0.002741\n",
       "Oth      0.002398\n",
       "Con      0.001713\n",
       "Name: SaleType, dtype: float64"
      ]
     },
     "execution_count": 260,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['SaleType'].value_counts()/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['SaleType'].fillna(df['SaleType'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "TA    0.511134\n",
       "Gd    0.394313\n",
       "Ex    0.070230\n",
       "Fa    0.023981\n",
       "Name: KitchenQual, dtype: float64"
      ]
     },
     "execution_count": 262,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['KitchenQual'].value_counts()/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since  only 1 value is missing for KitchenQual. let's replace by mode\n",
    "df['KitchenQual'].fillna(df['KitchenQual'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RL         0.775951\n",
       "RM         0.157588\n",
       "FV         0.047619\n",
       "RH         0.008907\n",
       "C (all)    0.008565\n",
       "Name: MSZoning, dtype: float64"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MSZoning'].value_counts()/len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since  only 1 value is missing for KitchenQual. let's replace by mode\n",
    "df['MSZoning'].fillna(df['MSZoning'].mode()[0], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GarageYrBlt        159\n",
       "GarageYrOld          0\n",
       "BsmtQual             0\n",
       "Exterior1st          0\n",
       "Exterior2nd          0\n",
       "MasVnrType           0\n",
       "MasVnrArea           0\n",
       "ExterQual            0\n",
       "ExterCond            0\n",
       "Foundation           0\n",
       "BsmtCond             0\n",
       "RoofStyle            0\n",
       "BsmtExposure         0\n",
       "BsmtFinType1         0\n",
       "BsmtFinSF1           0\n",
       "BsmtFinType2         0\n",
       "BsmtFinSF2           0\n",
       "BsmtUnfSF            0\n",
       "TotalBsmtSF          0\n",
       "Heating              0\n",
       "RoofMatl             0\n",
       "YearRemodAdd         0\n",
       "CentralAir           0\n",
       "Utilities            0\n",
       "MSSubClass           0\n",
       "MSZoning             0\n",
       "LotFrontage          0\n",
       "LotArea              0\n",
       "Street               0\n",
       "Alley                0\n",
       "LotShape             0\n",
       "LandContour          0\n",
       "LotConfig            0\n",
       "YearBuilt            0\n",
       "LandSlope            0\n",
       "Neighborhood         0\n",
       "Condition1           0\n",
       "Condition2           0\n",
       "BldgType             0\n",
       "HouseStyle           0\n",
       "OverallQual          0\n",
       "OverallCond          0\n",
       "HeatingQC            0\n",
       "Electrical           0\n",
       "Exterior2nd_mod      0\n",
       "GarageCond           0\n",
       "WoodDeckSF           0\n",
       "OpenPorchSF          0\n",
       "EnclosedPorch        0\n",
       "3SsnPorch            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 266,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df.apply(lambda x: sum(x.isnull()))).sort_values(ascending =False)[:50]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "# don't need to fill GarageYrBlt as we have already created on subfeature GarageYrOld and fixed missing value for it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop('GarageYrBlt', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>source</th>\n",
       "      <th>Exterior1st_mod</th>\n",
       "      <th>Exterior2nd_mod</th>\n",
       "      <th>GarageYrOld</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2914</th>\n",
       "      <td>2915</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1936</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>2916</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1894</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2916</th>\n",
       "      <td>2917</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>160.0</td>\n",
       "      <td>20000</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2917</th>\n",
       "      <td>2918</td>\n",
       "      <td>85</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>10441</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>700</td>\n",
       "      <td>7</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>others</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2918</th>\n",
       "      <td>2919</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>9627</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0</td>\n",
       "      <td>test</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 84 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "2914  2915         160       RM         21.0     1936   Pave  None      Reg   \n",
       "2915  2916         160       RM         21.0     1894   Pave  None      Reg   \n",
       "2916  2917          20       RL        160.0    20000   Pave  None      Reg   \n",
       "2917  2918          85       RL         62.0    10441   Pave  None      Reg   \n",
       "2918  2919          60       RL         74.0     9627   Pave  None      Reg   \n",
       "\n",
       "     LandContour Utilities     ...      MiscVal MoSold YrSold SaleType  \\\n",
       "2914         Lvl    AllPub     ...            0      6   2006       WD   \n",
       "2915         Lvl    AllPub     ...            0      4   2006       WD   \n",
       "2916         Lvl    AllPub     ...            0      9   2006       WD   \n",
       "2917         Lvl    AllPub     ...          700      7   2006       WD   \n",
       "2918         Lvl    AllPub     ...            0     11   2006       WD   \n",
       "\n",
       "     SaleCondition SalePrice source  Exterior1st_mod  Exterior2nd_mod  \\\n",
       "2914        Normal         0   test           others           others   \n",
       "2915       Abnorml         0   test           others           others   \n",
       "2916       Abnorml         0   test          VinylSd          VinylSd   \n",
       "2917        Normal         0   test          HdBoard           others   \n",
       "2918        Normal         0   test          HdBoard          HdBoard   \n",
       "\n",
       "      GarageYrOld  \n",
       "2914         13.0  \n",
       "2915         48.0  \n",
       "2916         58.0  \n",
       "2917         13.0  \n",
       "2918         25.0  \n",
       "\n",
       "[5 rows x 84 columns]"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats\n",
    "from scipy.stats import norm, skew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12766400>"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12815f60>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# let's see SalePrice first\n",
    "sns.distplot(train['SalePrice'], fit=norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "train['SalePrice']=np.log1p(train['SalePrice'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12840fd0>"
      ]
     },
     "execution_count": 273,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX8AAAEKCAYAAAD6q1UVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzt3Xd8VNed///XmabeJdSFCr1bEggMGGwQYONe4hqvS9bx\nOt5vnOy6/OK0R5rjTTZxsoljO44TJy4YY3DB9A7GFNFFEQgBQqCKhHob6fz+mDEWQkJCjHRHms/z\n8VDQ3Llz5+0b6TNH5557jtJaI4QQwrOYjA4ghBCi70nxF0IIDyTFXwghPJAUfyGE8EBS/IUQwgNJ\n8RdCCA8kxV8IITyQFH8hhPBAUvyFEMIDWYx64/DwcJ2YmGjU2wshRL+0a9euMq11xNUex7Din5iY\nSFZWllFvL4QQ/ZJS6pQrjiPdPkII4YG6LP5KqbeUUiVKqexOnn9QKbVfKXVAKbVVKTXe9TGFEEK4\nUnda/v8A5l3m+RPADK31WODnwBsuyCWEEKIXddnnr7XepJRKvMzzW9s83AbEXX0sIYQQvcnVff6P\nA8tdfEwhhBAu5rLRPkqp63EU/2mX2ecJ4AmAhIQEV721EEKIK+SSlr9SahzwJnCb1vpcZ/tprd/Q\nWqdrrdMjIq56mKoQQogeuurir5RKABYD39RaH736SEIIIXpbl90+Sqn3gZlAuFKqAPgJYAXQWr8G\n/BgIA15VSgHYtdbpvRVYCCHE1evOaJ/7u3j+W8C3XJZICDfz3vb8yz7/QIZcvxL9j9zhK4QQHkiK\nvxBCeCAp/kII4YGk+AshhAcybEpnIVxNLswK0X3S8hdCCA8kxV8IITyQFH8hhPBAUvyFEMIDSfEX\nQggPJKN9hMe43GggGQkkPI20/IUQwgNJ8RdCCA8kxV8IITyQ9PmLAa++qYUv887hYzOTmhCMl8Vs\ndCQhDCfFXwxYWmu2nyhnzeFi6ppaAFh9qIgpyeHMGjkIk2PxISE8khR/MWDtOFnOp/vOkhTux/yx\n0dhbNZuPlbI+p4TK+ibuTI2TDwDhsaT4iwGpyd7KusMlDA715VvTknAuMcqDGYNZe7iYtUdKAMWd\nqbHyASA8khR/MSBtPV5GdaOd+yclXCj8X5k1MhKAtUdKsFkUt4yLMSKiEIaS4i8GnLomO5uOlTIi\nKoDEcL8O95k1MpImeyubc8sI9Lby4OTBfZxSCGPJUE8x4Gw+VkZjcytzRkVddr+5Y6IYHxfEqkPF\nLMw63UfphHAP0vIXA4rWmr2nzzM8KoCoIO/L7mtSirvS4qhtauH5j/bT3NLKgxnyF4DwDNLyFwPK\n2coGKuubGR0T2K39LSYT35w8mOuHD+LFJdm8tvE4WuteTimE8aT4iwHlcGEVChge1b3iD2A1m3jt\noTRuHhfNr5cf4al3d1NR29R7IYVwA1L8xYBy6GwVg8N88fe6sh5Nm8XEH+67hufnjWDN4WLmvrKJ\nTUdLeymlEMaT4i8GjPLaJoqqGhgZ3f1Wf1tmk+I/Zqaw5KmpBPlYefitHfz004M0t7S6OKkQxuuy\n+Cul3lJKlSilsjt5Ximl/qiUylVK7VdKpbo+phBdO1xYBcCoHhb/r4yJDeKz/5zGI9cm8o+tJ/nL\nhuNUNzS7IqIQbqM7Lf9/APMu8/yNwFDn1xPAX64+lhBX7lBhFYMCvAjz97rqY3lbzfz01tH8/dGJ\nnKtt5G9bTsgHgBhQuiz+WutNQPlldrkN+Kd22AYEK6WiXRVQiO6oamjm1Lnaq271t3f98EH825RE\nKuqa+NuWE9Q22l16fCGM4opx/rFA2ztkCpzbCl1wbCG6ZfepClo1JEf4X9VxWltb2bNnD1u3bqWo\nqAibzUa5CuKuERP48FAdy7MLuTst3kWphTBOn97kpZR6AkfXEAkJsmaqcJ3dpypQQHyoT4+PsXHj\nRl5++WVOnDiByWQiPDycxsZGKisrAYgcksqemrmkDQ4lqZNpI4ToL1xR/M8AbZtCcc5tl9BavwG8\nAZCeni530giX2ZVfQXSQd48WarE3N/Hiiy+yePFikpKSeOmll8jMzMTPz1HgX126g71bVrFtxUd4\nnzjARw0P8L3H7sdsktlARf/liqGenwIPO0f9TAYqtdbS5SP6jL2llT3550kI873i1zbW1/HOb15g\n8eLFfPvb3+bjjz/m9ttvv1D4AYIjoph5x8M89dKbhCcMpX7L27z/9puu/E8Qos91Z6jn+8CXwHCl\nVIFS6nGl1JNKqSeduywD8oBc4K/AU72WVogOHCmqpq6phcGhV9YV09zYwIJXfkxB7mF++9vf8swz\nz2Cz2TrdPzA0gn//wcv4DJ3MiY2L+GLZh1cbXQjDdNnto7W+v4vnNfAdlyUS4grtzq8AuKKWv9aa\nT/76W/KPZnPHt59n/vz53XqdxWpj/iPPsODPL7Fu4ZsEhUZAxsM9yi2EkeQOX9HvZZ2sIDLQi2Af\na7df8+XyRRzO2sysex5nzOTrr+j9hscE4zP1YWyRKSz9++/Jzc290shCGE6Kv+j3dp2qIH1w6CUr\ndnXmbF4O6xa9xcj06Uy58e4rfj+TUkxKGUTl+Aew2Lx55plnaGxsvOLjCGEkKf6iXyuqbODM+XpS\nB4d0a397UxOfvPlbAoJDufnRZ7r9gdFeemIIJt8gYuc8zvHjx/nTn/7Uo+MIYRRZzEX0K+9tz7/o\n8YEzjjH4ZdWNxId23ee/6dN3KTubzwP/9Uu8/Xp+Q1igt5VR0YHklpq54867eOutt5gzZw5jx47t\n8TGF6EvS8hf9WkF5HWaTIjr48qt2AZwrKuDL5YsYN3U2KWPTr/q90waHUt/cwrQ7HyM0NJRf/OIX\ntLbKDKCif5DiL/q1s5X1RAV6YzFd/kdZa82q917DarMx657HXfLeKRF+eFlMbD5Vw3//93+zf/9+\nPvnkE5ccW4jeJsVf9Ftaa86ebyC6i7V6AU4c3E3u/p1cd9tD+AeHuuT9LWYTwyIDWH2omJvm38yE\nCRP43e9+R11dnUuOL0RvkuIv+q3z9c3UN7cQE3z5+Xx0ayvrFv2doLBI0mfd4tIMo2ICKatpYl9B\nJc8++yxlZWW8++67Ln0PIXqDFH/RbxWerwfosvgfztpC4cljzLjzm1isnd/B2xPDIwOwmhWrDhWT\nmprKjBkzePPNNy9MBieEu5LiL/qts5UNKCAqsPNuH601mz99j/CYBMZOucHlGbytZqakhLPyYBFa\na5555hmqqqp4++23Xf5eQriSFH/Rb509X09EgBc2S+c/xrn7d1JScIJr538Dk+nKZ/zsjjmjIjl1\nro5jJTWMGDGC2bNn8+6771JTU9Mr7yeEK0jxF/3W2fP1XXb5bF22kMDQCMZkXNkUDlcic1QkAKsP\nFQPw5JNPUlVVxfvvv99r7ynE1ZLiL/qlmkY7VQ32y470Kcg9TH7OATLm3onZ0nv3M0YGejM6JpCN\nR0sBGD16NNOmTePtt9+WaR+E25I7fEW/dLYbF3u3Lv8Qbz9/Umfc2OXx2t85fKWmD43gzc151DTa\n8fey8Oijj/L444+zfPlybr/99qs6thC9QVr+ol+6MNInqOPiX1Z4mpzdW0m/4VZs3j1f2rG7rhsW\njr1V8+XxcwBMmTKFlJQU3nnnHRyzngvhXqT4i37pbGUDIb5WfGwdX8TdtuIjLBYrkzJv65M8aYND\n8LGa2XzM0fWjlOKhhx7i4MGD7N27t08yCHElpPiLfuns+XqiO2n1N9TVkv3lOsZOuQG/wOA+yeNl\nMTMlJYxNzn5/gFtvvZWAgAD+9a9/9UkGIa6EFH/R7zTZWymvbSKqk4u9B7aupbmpkbQbbu7TXNOH\nhnPyXB355xzTO/j6+nLXXXexevVqiouL+zSLEF2R4i/6nZLqBjQd39yltWbXhs+JThpGdOLQPs01\nfWgEAJtzv279P/DAA7S0tLBgwYI+zSJEV6T4i36nqLIBoMOWf0HuIUoLTpI286a+jkVKhB+xwT4X\ndf3Ex8dz/fXXs3DhQpqamvo8kxCdkeIv+p3iqgasZkWo36Xz9Oxa/zlePr6MzpjZ57mUUkwfGs7W\n3HPYW76e1//ee++lvLycDRs29HkmIToj4/xFv1NU1cCgAG9M7ZZgrKup4tCOTVwzY16fDO/8Stt7\nBJRSVDfa+c3KHAaH+fFARgJTp04lMjKSjz76iDlz5vRZLiEuR1r+ot8pqmrssL9//5bVtNibSZ05\n34BUDkMi/FHAsZKv5/Uxm83cfvvtbNmyhZKSEsOyCdGWFH/Rr1Q3NFPbaCeyXX+/1po9m1YQN2Qk\nkfFJBqUDH5uZuBAfjhVXX7T9jjvuoLW1VVb6Em5Dir/oV4qrHHPltG/5F53KpexsPuOnGd+tMjQy\ngIKKeuqbWi5sGzx4MGlpaXz00Udyx69wC1L8Rb9SVNXxSJ/9X6zBbLEycuJ0I2JdZOggfzSQW3rx\nlM533XUXp06dYvfu3cYEE6KNbhV/pdQ8pVSOUipXKfVCB88HKaU+U0rtU0odVEo96vqoQkBxZQN+\nXhb8vb4eq9Bit5O9bT3DrpmMj1+Agekc4kJ88bKYLun6mTNnDr6+vixevNigZEJ8rcvir5QyA38G\nbgRGAfcrpUa12+07wCGt9XhgJvC/SinXrpcnBI6Wf1Sg10XbjmdnUVddybhrZxuU6mJmkyIlwp/c\nkpqLunj8/Py48cYbWbFiBbW1tQYmFKJ7Lf9JQK7WOk9r3QQsANrPlqWBAKWUAvyBcsDu0qTC47W0\nakqqGy7p79//xRp8A4JIGZtuULJLDY3053x9M3llFxf52267jbq6OtavX29QMiEculP8Y4HTbR4X\nOLe19SdgJHAWOAB8V2vdihAulF9eR3OLJrJN8W+oreHonm2MmXx9ry7YcqWGDnJ0P7W92xcgLS2N\nqKgoPv/8cyNiCXGBqy74zgX2AjHABOBPSqnA9jsppZ5QSmUppbJKS0vbPy3EZR0prAIuvth7aOcm\nWuzNjL12llGxOhTqZyPMz8bmY2UXbTeZTNx0001s2bKFiooKg9IJ0b3ifwaIb/M4zrmtrUeBxdoh\nFzgBjGh/IK31G1rrdK11ekRERE8zCw91pKgaBQwK+Lr4H9i6lrDo+D6fxK07hkb68+XxczTaWy7a\nfvPNN2O321m1apVByYToXvHfCQxVSiU5L+LeB3zabp98YBaAUioSGA7kuTKoEDlF1YT62bBZHD+2\nVRVl5B/NZuyUG1DtpnpwB0MHBVDf3MKuUxe38EeMGEFKSgpLly41KJkQ3Sj+Wms78DSwEjgMLNRa\nH1RKPamUetK528+Ba5VSB4C1wPNa67KOjyhEz+QUV1/U5XN452YAtxjb35HkcD8sJnVJ149Sivnz\n55OVlUVhYaFB6YSn61afv9Z6mdZ6mNY6RWv9S+e217TWrzm/P6u1nqO1Hqu1HqO1fqc3QwvPU9/U\nwslztRdd7D20YxOR8cmER8df5pXG8bKaSR0ccslFX4D58x3zDy1btqyvYwkByB2+op84VlKN1l9P\n61B5roSC3EOMmnSdwckub8awCA6eraKspvGi7QkJCYwbN05G/QjDSPEX/cKRQsfdsl91+xzO2gLg\n9sV/+tBwALYcu7QX9Oabb+bw4cPk5cnlMdH3pPiLfuFIUTXeVtOFBVwObd9I1OAhhEa2v+XEvYyJ\nCSLE18qGnEuncv5qbn8Z9SOMIMVf9As5xVUMiwzApBTnS4s4k3fE7Vv9ACaT4oYRkaw7UkKT/eL7\nHiMjI0lNTZXiLwwhxV/0CzlF1QyPdNw1ezjLMcpn1ET3L/4AN46JoqrBzpd55y55bs6cORw+fJhT\np04ZkEx4Min+wu2V1TRSVtPEiGjHTeOHdmwiOmkYIYOiDU7WPdOGhuNnM7Mi+9JhnZmZmYB0/Yi+\nJ8VfuL2cIsfF3hFRAVSUFnH2xNF+0+oH8LaauWFkJKsOFtPSevFCLjExMYwbN06Kv+hzUvyF2zvs\nnNNneFQAh3duAmCUm97Y1Zl5o6M4V9vEzpPllzw3d+5csrOzOXOm/awpQvQeKf7C7eUUVRPubyPc\n34uD2zcSkzyc4Igoo2NdkZnDI/CymFiRXXTJczLqRxhBir9we0eKqhkRFcipU6coOpXL6EkzjI50\nxfy8LMwYFsGK7CJa23X9xMXFMXr0aFauXGlQOuGJpPgLt2ZvaSWnuJqR0QEXWsbuOpdPV+aPi6ao\nqoHtJzru+tm3b5/M9SP6jPusfiFEB06U1dJkb2VkdCAf/HMN0UnDCAobZHSsHpkzKooALwuLdhUw\nJSWM97bnX3iuYdAYAH795kIy5twBwAMZCYbkFJ5BWv7CrR12jvQZZGlg//79jEi91uBEPedjMzN/\nXDTLswupbbx4ldOwqFgi45Mv3MMgRG+T4i/c2uHCKqxmRd6+bQCMSJtqcKKrc3daHHVNLSzv4MLv\nyInTOX3sENUVl94MJoSrSfEXbu1wYRUpEf6sX7eW5ORkwmP6d1dI2uAQEsN8WbTr9CXPjUyfBlpz\nZNcXBiQTnkaKv3BrRwqrGRKk2LlzJ7NnzzY6zlVTSnFnahzb8sqpqG266LnwmATCYxIuLFIjRG+S\nC77CrbS9CFrXaKeoqoEz5/fT0tJCS9QYA5O5zp2psfx+zVGyTpWTOeri+xVGpk9jy2cLqK06D/Tv\nv3KEe5OWv3BbhVUNAFTn7SEwNJzopGEGJ3KNuBBfrh8+iB0nK7C3XDzT54i0aWjdytE92wxKJzyF\nFH/htooqG8DeSNHRfQxPneqWi7T31CPXJlLbaOfAmcqLtkcmJBMcESX9/qLXSfEXbquwsgG/ilxa\nmpsYkdZ/h3h2ZNqQcML9vS6Z5lkpxYi0qZw4tIeamhqD0glPIMVfuK2iynq8Sw7i4x9IwrCxRsdx\nKZNJMSU5lIKKek6X11303Ii0qbTYm9m4caNB6YQnkOIv3FJLq6a4spbG0wcYds1kTGaz0ZFcLjUh\nBC+L6ZLWf1zKSPyDQlmzZo1ByYQnkNE+wi2V1TSiS3JpaaxnRGr/vbGr7eil9rysZlIHh7Ajr5wb\nx0QR4G0FQJlMDE+dwqZN62loaMDb27uv4goPIi1/4ZYKKxswFx7AYvMmeXSq0XF6zZSkMFq0Zke7\nyd5GpE2lrq6OrVu3GpRMDHRS/IVbKjxfi7nwIEPGTcRisxkdp9eEB3gxLNKfHSfKsbd+Pexz8Ijx\nBAYGsnr1agPTiYFMir9wS/nHDqMaqxmZ3n+7fLprSnI41Y12ss9UXdhmtli4/vrrWb9+Pc3NzQam\nEwOVFH/hlkpzssBkZsi4SUZH6XVDI/0J87Px5fGyi7ZnZmZSWVnJzp07DUomBrJuFX+l1DylVI5S\nKlcp9UIn+8xUSu1VSh1USskYNdFj1Q3NtJzeT2jiaLx9/YyO0+tMSjE5OYzTFfUUVHw97HPq1Kn4\n+PhI14/oFV0Wf6WUGfgzcCMwCrhfKTWq3T7BwKvArVrr0cA9vZBVeIgjOTmY6s6Rcs3AurHrctIG\nh2Azm9jWZtint7c31113HWvXrqW1tfUyrxbiynWn5T8JyNVa52mtm4AFwG3t9nkAWKy1zgfQWpe4\nNqbwJEeytqBRXDN5mtFR+oy31cw1CcHsL6i8aKGX2bNnU1payr59+wxMJwai7hT/WKDt5OMFzm1t\nDQNClFIblFK7lFIPd3QgpdQTSqkspVRWaWlpzxKLAa/w0E5UeBKRERFGR+lTk5PDsLdqsk5VXNg2\nY8YMrFar3PAlXM5VF3wtQBowH5gL/EgpdckUjFrrN7TW6Vrr9AgP+8UW3VNRUkjjuQKChwzcsf2d\niQz0Jjncj+1552jVGoCAgAAmT57M6tWr0c5tQrhCd4r/GSC+zeM457a2CoCVWutarXUZsAkY75qI\nwpMcznLMZpkwNsPgJMaYnBzG+fpmjhRWX9iWmZnJ6dOnycnJMTCZGGi6U/x3AkOVUklKKRtwH/Bp\nu30+AaYppSxKKV8gAzjs2qjCE2Tv3ExrUAyDEzxzIZOR0YEE+VgvuvB7ww03YDKZZNSPcKkui7/W\n2g48DazEUdAXaq0PKqWeVEo96dznMLAC2A/sAN7UWmf3XmwxEJWWllJ8MoeW6DFEBXnmfDZmkyIj\nKZTc0hpySxxTOoeFhZGWlibFX7hUt/r8tdbLtNbDtNYpWutfOre9prV+rc0+v9Faj9Jaj9Fav9Jb\ngcXAtW7dOtAaYscR4e9ldBzDpCeGYjYp3tl26sK2zMxMjh07xsmTJ40LJgYUucNXuI3Vq1djDowg\nKi4Rs2ngrNp1pfy9LIyNDWLRrgJqnMM+v1q8Xkb9CFeR4i/cQlVVFdu3b8ceNYbYEF+j4xhuSnIY\nNY12luwuACA6OpqxY8dK149wGSn+wi1s3LgRu91OY+QYYoN9jI5juLgQH8bFBfH2l6cuDPGcPXs2\n+/fvp6ioyOB0YiCQ4i/cwurVqwkICUOHxBMjxR+lFA9NHkxuSc2Fm74yMzMBWLt2rZHRxAAhxV8Y\nrqGhgS1bthA9Mh2L2UxkoGeO9Glv/tho/L0sLNjhuME+KSmJlJQU6foRLiHFXxjuiy++oL6+npao\nsUQFeXv0xd62/Lws3DI+hmUHCqlqcMzpn5mZyc6dO6moqOji1UJcnhR/Ybg1a9YQGBjISXO0dPm0\nc9/EeOqbW/hs31nAUfxbW1sdw2KFuApS/IWhmpubWb9+PROnTKOmSRMbJMW/rXFxQYyICuCDnY6u\nn5EjRxIbGytdP+KqSfEXhsrKyqKyspI451w+MSFS/NtSSnHfxHj2F1Ry8GwlSikyMzPZunUrtbW1\nRscT/ZgUf2GoNWvW4O3tTXP4MKxmRWSg597Z25nbr4nFZjGx0Nn6z8zMpLm5mY0bZcE80XNS/IVh\nWltbWbNmDdOmTeNIaQPDowKwmORHsr1gXxs3joliyZ4zNDS3MGHCBMLDw6XrR1wV+U0Thjlw4AAl\nJSXMmjWb/acrGRcXbHQkt3VvejxVDXZWZBdhMpmYNWsWmzZtorGx0ehoop+S4i8Ms2bNGiwWC4lj\n06lutHNNvBT/zkxODiMh1JcFO/MBR9dPXV0dW7duNTiZ6K+k+AtDaK1ZuXIlGRkZHK1wLE5+TYIU\n/86YTIp7J8azLa+ck2W1TJw4kcDAQOn6ET0mxV8Y4tChQ5w+fZp58+ax9/R5ArwtJIf7Gx3Lrd2d\nFodJwQdZp7HZbMycOZN169bR3NxsdDTRD0nxF4ZYsWIFFouFWbNmsSf/PBPigzHJnb2XFRnozQ0j\nBvHRrgLsLa1kZmZSWVlJVlaW0dFEPyTFX/S5r7p8Jk+ejJdfADlFVdLf3033pMdTUt3IhpxSpk6d\nio+Pj3T9iB6R4i/63FddPnPnzmV/QSWtGiZIf3+33DBiEOH+XnyQdRofHx+mT5/O2rVraW1tNTqa\n6GcsRgcQnqdtl88H+8sBmBAfYnAq9/Pe9vwOt4+MDmDdkRJKqhuYPXs2q1atYv/+/UyYMKGPE4r+\nTFr+ok9prVmxYgWTJ08mJCSEPfkVDA7zJdTPZnS0fiNtcAgtrZolu88wY8YMrFardP2IKybFX/Sp\nQ4cOUVBQwLx589Basyf/vPT3X6FBAd6kDQ7hg6zTBAQEMHnyZNasWXNhxS8hukOKv+hTy5cvv9Dl\nU1jZQEl1I9ckSJfPlbo3PZ680lp2napg9uzZ5Ofnc/ToUaNjiX5Eir/oM1+N8pkyZQrBwcHsPOno\n708bLMX/StU22bFZTLy0/AiVISNQysT/vrWw0+sEQrQnxV/0ma+6fObOnQvAtrxyArwtjIwONDhZ\n/+NlMTMuNogDBZVYfAJIHDmOg9s3SteP6DYp/qLPtO3yAdh+4hwTE0Nl2cYeShscQlNLKwfOVDI6\nYyblxWcoOpVrdCzRT0jxF32ifZdPSVUDeaW1ZCSFGh2t30oI9SXC34usUxWMSJuKyWwhe9t6o2OJ\nfqJbxV8pNU8plaOUylVKvXCZ/SYqpexKqbtdF1EMBNnZ2Rd1+Ww/4ejvz0gOMzJWv6aUIj0xhPzy\nOqpbbaSMSePQjo1yw5foli6Lv1LKDPwZuBEYBdyvlBrVyX4vA6tcHVL0f0uXLsVqtZKZmQk4unz8\nbGbGxEh//9W4JiEEk4KsUxWMnjyTqvIydu/ebXQs0Q90p+U/CcjVWudprZuABcBtHez3n8BHQIkL\n84kBoKWlhWXLljFjxgwCAx3FfnteOWmJoVjM0vN4Nfy9LIyKDmR3fgXJ4zKw2Lz4/PPPjY4l+oHu\n/ObFAqfbPC5wbrtAKRUL3AH85XIHUko9oZTKUkpllZaWXmlW0U9t27aNsrIybrnlFgDO1TRyrKRG\n+vtdZFJSGHVNLRwrb2LYhAxWrlyJ3W43OpZwc65qdr0CPK+1vmxno9b6Da11utY6PSIiwkVvLdzd\n0qVLCQgIYMaMGQDscPb3T06W4u8KyRF+hPnZ2H6inNEZ11NRUcG2bduMjiXcXHeK/xkgvs3jOOe2\nttKBBUqpk8DdwKtKqdtdklD0aw0NDaxevZrMzEy8vLwA+DLvHD5WM2NjZVoHVzApxaSkUE6dqyMg\ncSwBAQF8+umnRscSbq47xX8nMFQplaSUsgH3ARf9ZGmtk7TWiVrrRGAR8JTW+mOXpxX9zvr166mt\nrb3Q5aO1Zt2REqYOCcNmkf5+V0lNCMFiUuwqqGbevHmsWbOG2tpao2MJN9blb5/W2g48DawEDgML\ntdYHlVJPKqWe7O2Aon9bunQpgwYNYuLEiQDkltRQUFHP9SMGGZxsYPHzsjAmNog9+RXMuelm6uvr\nZaZPcVndanpprZdprYdprVO01r90bntNa/1aB/s+orVe5Oqgov85f/48mzdvZv78+ZjNZgDWHnEM\nBrtBir/LTUkOo9HeyjF7OPHx8XzyySdGRxJuTP7uFr1m2bJlNDc3X+jyAVh3uIRR0YFEB/kYmGxg\nig/1JT7Eh398eYpbb72V7du3U1hYaHQs4aak+Ites2TJEkaMGMHIkSMBOF/XxK78CmaNlFZ/b5k6\nJJxT5+oIHzUVrTVLly41OpJwU1L8Ra84evQo2dnZ3HHHHRe2bTxaSkurlv7+XjQ6JojoIG8+Pd5I\nWloan3z39ImOAAAZ4klEQVTyicz0KToka/iKXrF48WKsVuvFXT5HSgjzs3HobBVHCqsNTDdwmU2K\nb04ZzP+syOH7M+bwl9+9xMGDBxkzZozR0YSbkZa/cLnm5mY+++wzZs6cSUiIY6GWJnsrG3JKmTE8\nApOSKZx70wOTEvC1mcmxJmOz2ViyZInRkYQbkuIvXG7jxo2Ul5df1OWz7kgJlfXN3DI+xsBkniHY\n18aDGQksz6nk2uuuZ+nSpTQ0NBgdS7gZKf7C5ZYsWUJ4eDjTp0+/sG3RrgIGBXgxfUi4gck8x7em\nJ2MxmbAPzqCqqoqVK1caHUm4GSn+wqXKysrYuHEjt956KxaL45JSaXUj63NKuDM1Tmbx7CORgd7c\nkx7HxvIgYuPi+fDDD42OJNyM/CYKl1qyZAktLS3ceeedF7Z9svcMLa2au9NiL/NK4Wrfvi6FFiBi\n3Ax27dpFXl6e0ZGEG5HiL1ymtbWVhQsXkp6eTkpKCuCYy+fDrAImxAczZFCAwQk9S0KYL7dNiGG3\nGorZbGHRIrnxXnxNir9wmS+++IKCggLuu+++C9uyz1SRU1zN3WlxBibzXM/MGkaLzZ+oEWl8/PHH\nNDU1GR1JuAkZ5y9cZsGCBYSFhV1YqhHgtY3H8feyyCgfgySE+XLvxHg+LB6H+eB21q5dS0Xo6E73\nfyAjoQ/TCSNJy1+4xNmzZ9mwYQN33XUXNpsNgKPF1SzLLuSRaxMJ8rEanNBz/ecNQ1FRw/EJDmfB\nggVGxxFuQoq/cIlFixahteYb3/jGhW1/XHsMX6uZx6clGZhMRAV58/C1SVTHZrBjxw6KT58wOpJw\nA1L8xVVrbm5m0aJFTJ8+ndhYx4ieY8XVfH6gkH+7NpEQP5vBCcVTM4fgM2wqymJl5xqZ6llIn7/o\nofe251/4/tCOTZSWlnLDg09f2L75WCk+VjPfmp5sVETRRoifje/eNIFf705l/9a1zLrnMXz8A42O\nJQwkLX9x1bavWkzIoGiGjHOs1nW4sIrl2UU8OSOFUGn1u41vTh5MZOpsWpqb2L1xhdFxhMGk+Iur\nUpB7iILcw2TMuQOTyUx9Uwuf7D3DiKgAnpyRYnQ80YbNYuInD2XSEp7C1lUf09rSYnQkYSDp9hFX\nZduKxXj7+jN+2hwAVhwspLrBzg0jBrFoV4HB6UR7s0cOImz8LM6vfYPsrK2My5je9YvEgCQtf9Fj\nFaVFHNn1BanXz8fm7cORwip2nqxg2pBw4kJ8jY4nOqCU4s75c9E+waz9dKHRcYSBpPiLHtuxagnK\npJg4+1bO1zXx4a4CooO8mT0q0uho4jJiQ/2JnjiPmjNHyd6/1+g4wiBS/EWPNNTWsHfzSkZnzMQ3\nKJT3d+TTqjUPTErAKjN3ur277robbfNjxaJ3jI4iDCK/paJHdq3/nKaGejLm3smqg8WcrqjnztQ4\nwvy9jI4muiE0KIDEjHnU5x9g+94DRscRBpDiL65YbW0t21Z+RMrYdM7bBrElt4zJyaGMjQ0yOpq4\nAnfccy9YvFiz5H2a7K1GxxF9TIq/uGILFiygrrqSCXPu5cNdp4kN9uGmMdFGxxJXKCAwiJHXzqUl\nfw8rdhw0Oo7oY1L8xRWpr6/nrbfeIml0KhvP+aI13D8pQVbo6qfm3HEvSil2r15MSbWs8+tJujXO\nXyk1D/gDYAbe1Fr/ut3zDwLPAwqoBv5Da73PxVmFG/jggw8oLy8nYf7THKqo596J8XIXr5tpO/VG\nVwJDwhk7bQ77N69i8eYDfHfWUJRSvZhOuIsum2tKKTPwZ+BGYBRwv1JqVLvdTgAztNZjgZ8Db7g6\nqDBeQ0MDf/vb3xifms7OmiBGRQcyTvr5+70bbn8Qs8lE4bZP+GTvWaPjiD7Snb/VJwG5Wus8rXUT\nsAC4re0OWuutWusK58NtgCzbNAAtWLCAsrIyqpJvwGJW3DohRlqJA0BgaAQTZ9+K5XQWP3tvPZX1\nzUZHEn2gO8U/Fjjd5nGBc1tnHgeWX00o4X6qqqp47bXXSB6dyqHmQcwfG0OgtyzQMlBMu/leLDYv\nanZ/xv+sOGJ0HNEHXHqVTil1PY7i/3wnzz+hlMpSSmWVlpa68q1FL3v99depqqri7OBM0gaHkJoQ\nbHQk4UK+AUFcO+9uzGf3897KrWw8Kr+fA113iv8ZIL7N4zjntosopcYBbwK3aa3PdXQgrfUbWut0\nrXV6RERET/KKPvTe9nze257Pq0t38PY//0XY6KlUWCOYlBgq3T0D0OR5dxIUFERQ7kqe/XAvlXXS\n/TOQdaf47wSGKqWSlFI24D7g07Y7KKUSgMXAN7XWR10fUxhp3Ud/RylFYdz1TIgPJj5UJm0biLx8\n/HjqqadoPHOYimN7+NEn2UZHEr2oy+KvtbYDTwMrgcPAQq31QaXUk0qpJ527/RgIA15VSu1VSmX1\nWmLRp87m5XBw2wYCx2eCTzBzZNK2Ae3+++8nJSWFkNxlfLr7FAt3nu76RaJf6tY4f631MmBZu22v\ntfn+W8C3XBtNGK21tYUV77yKT0AQZwdNYXpKGMG+MqZ/ILNarfzwhz/k0UcfJbl8Bz/6xItRMYGM\nkSG9A47clik6tXv9Ms7kHcF/0t3YfHy5bqhcp/EEkydPZu7cuZTvWk6wruGpd3dL//8AJMVfdKik\npIR1i94iZth48v1GMHVIOL5esvCbp3juuedQCoaXrKOwsp6n3tslk78NMPLbLDr00ksvYW9uhtS7\n8babmZoSbnQk0YdiYmJ48skneeWVV/jm/7uOt3I1LyzeT1pCSKcjvR7ISOjjlOJqSMtfXGLDhg2s\nWLGCcZn3cLzeh+uGRuBjMxsdS/Sxxx57jFGjRrHynT/xH5MjWbz7DGsOFxsdS7iIFH9xkYqKCn78\n4x+TkpJCcfS1+NrMTEkJMzqWMIDVauWll16iurqawg3vcN/EeNbnlLIxp8ToaMIFpPiLC7TW/OhH\nP+L8+fM8/N0fcvxcAzOGReBlkVa/pxo2bBhPP/00K1euZLpPAePjglh5qJgtx+QO4P5Oir+44MMP\nP2Tt2rV873vfY1GeJsDLQkaStPo93WOPPcbYsWP5+c9+RmaiF2NiAlmWXcSXx8uMjiaughR/AUBe\nXh4vvfQSU6dOJeXa+ew4Uc7M4RHYLPIj4uksFgsvv/wydrudj//yK+6+JpqR0YF8tr+QHSfKjY4n\nekh+swW1tbU888wzeHt788tf/oqXV+YQG+zDxMRQo6MJN5GUlMSvfvUrzuQdYd0Hf+X+ifEMjwzg\n471nyDopHwD9kQz19HCtra08//zz5OXl8cYbb7CloImDZ6v4w30TqG1sMTqe6GOXXQUsaAST597J\ntpWLiRs6mgcyruOdbadYsucMGhnq2d9Iy9/D/fGPf2Tt2rW88MILXJOewW9X5TAuLohbxsUYHU24\noRvueZz4YaNZ+tbvKD11jIcmD2ZopD9L9pzh3e2njI4nroAUfw+2dOlSXn/9de655x4efPBB3vri\nBIWVDbx400hMJpmyWVzKbLFw91M/xC8wmPd//yOqywp5KGMwwyMDeHFJNv/68qTREUU3SfH3UBs2\nbOAHP/gB6enp/PCHP+R0eT1/WpfLnFGRZCTLCB/ROf/gUB7471+htea9/32RxtoqHsxIYPbISH70\nyUH+8cUJoyOKbpDi74G+/PJLvvvd7zJs2DBeffVVLBYrzy7ah8Wk+Omto42OJ/qBsKg47v/ez6k+\nX877v/sh9oY6Xn0wlbmjI/npZ4d4c3Oe0RFFF6T4e5hdu3bxne98h8TERP76178SEBDAO9tPsf1E\nOT+8eSQxwT5GRxT9RGzKCO5+6kWKT5/gX//zPDVV5/nTA6ncNDaKX3x+mDc2HTc6orgMKf4eZP36\n9fz7v/87UVFR/O1vfyMkJITckhp+vfwI1w2L4Bvp8V0fRIg2hk7I4N7v/pSys/k8/PDDVJwr4w/3\nXcPN46L51bIj/Hl9Llpro2OKDkjx9xALFy7k6aefJjk5mX/+85+Eh4dTWt3Io//YgY/VzK/vHCvr\n8ooeGTJuIvd//xfkF5zh9nvu4y+fbiUjKYwJ8cH8ZmUO3/zbDlpb5QPA3UjxH+BaWlr4/e9/z09+\n8hOmTZvG22+/TXh4OHVNdr719k5Kqxv52yMTpbtHXJXEkeN56Nlf01hfx1s//y7H92/n7rQ4pqSE\nsSW3jO8v3EujXe4bcSdS/AewkpISHnvsMd544w3uuece/vznP+Pn50dZTSOP/H0nB85U8n/3pzIh\nPtjoqGIAiBsykm/99E+EDIrhgz/8lC8+e5/5oyOZMyqSj/ee5cG/bqesptHomMJJiv8AtXnzZu64\n4w4OHDjASy+9xM9+9jMsFgt78iu4+Y9b2Hf6PL+/dwKZsiC7cKGgsEE88oP/Zczk69mw+G3+9T/P\nMz6khf+7/xqyz1Zy6/9t4UBBpdExBVL8B5yysjKee+45nnjiCcLCwvjwww+5/fbbOVFWy/c/2Mtd\nf9mKxaxY/NS13DYh1ui4YgCyenlz+xPPccvj36c4/ziv/+hJag5t5IN/n4wG7vzLF7y28bhcBzCY\nMupKfHp6us7KyjLkvQei5uZmFi1axCuvvEJ9fT2PPf44s+54gJ35Naw5XMy2vHPYLCYenpLIUzNT\nCPa1dXnMy87zIkQ3VJ4rYenfXyEvexejRo3iO9/9Ph/me7M8u4hJSaH8/LYxDI8KMDpmv6KU2qW1\nTr/q40jx79+am5v5/m/f4sul71NbXoxP7HDMafdQbg6hxdmyGjrIn3ljonh4SiIRAV4XvV4KvOht\nWmuyt61n/aK/U3muhGETJhORcQtfnPOl0d5CRlIYf7z/mkt+NkXHpPh7qOqGZr7IPcemg/lsW7+C\nwl2roaaM1qBYmkfMJSBxHFFBPkQGehMZ6EVCqC9h/vJLJYzX3NTIjlUf88XnC2isryNh+HjMI2/g\ncGs0VquFu1JjeXhKIiOiAmTY8WVI8fcQWmtyS2r43eqjHDlbSf7RA5gK9mAu2INqacInKoWh029h\n3KTpRAX5yELrwu011NWye8MydqxaQvX5cwSEDiJm/HUcsg2jyTuU5Ag/bhwTRUZSGNckBBPgbTU6\nsluR4j+A1TXZ2Zp7jvU5JazPPk3R8WzMxTlYiw6gG6oxW70YM3kmE2fdQnTiUKPjCtEjLfZmDu3Y\nzL4vVnHy0F601kQmpED0aE57J9ESFIsymYgN9mFwmC8JoX4MDvNlcKgvsSE+xAb7EOpn87i/Evq0\n+Cul5gF/AMzAm1rrX7d7XjmfvwmoAx7RWu++3DHdufh/1Q/e0qppbG6huVVjb2lFKcXdaXEEeFvw\n83LdOjhaa/LKall/uJiVO7LZvz+blvJ8rOdPoyry0a0tWGxeDB0/iVGTZjB03ESsXt4ue38hjHZ9\ngpWlS5eyfv169u51fBD4+gcQkTiC2oAEmgJjqfKKoF5dfDOi1awI9rER7Gt1ftkI8bUS4msjxNfG\nE9clD7jpyfus+CulzMBRIBMoAHYC92utD7XZ5ybgP3EU/wzgD1rrjMsd1x2Kf6O9hYKKevLP1ZFf\nXscp578HzpynusFOXVPndyTazCb8vS34e1kI8LYQ6GMlxMfKzeNjiAn2ISbIm2Bf2yVr4FbW1pNX\nUMK+3FMcOHKcI7knyM/Pp/F8CaaqQpS9AQCzxUbk4GSSRo4neXQqcUNGYbF2PUJHiP6o7SpgFRUV\nbN68mZ07d7Jr1y5OnPh6imi/oBCCowbjEx6L8g+j1TuEBlsgtZYgquxmatv9ztosJuKCfYgL9SUu\nxIdwPxsB3lb8vS3sO30eL4sZq0VhNZmwmL/+996J8XhZzfhazW734dGXxX8K8FOt9Vzn4/8PQGv9\nUpt9Xgc2aK3fdz7OAWZqrQs7O66rin9rq8beqmlp1dhbW2lthfrmFqobmqlqaKaqvpnqhiaKzzdQ\nWFlHYWUDhefrKaqsp7iqHq0B5znwsZqIC/ZGgaN1bzPjbTVhVhpTqx273fHV0NBITX0DdQ2Nzq8m\nauvraWlsAHsDyt4I9kaUvQGzvQFTUw26oRrdUINqqr3kv8ErIATf0Ehi45NIHDqC6KShRMQMxmyR\nVTaFqK06T/HpPEpOn6D49AlKCk5QdjYfe3PTRftZbV74+Adh8w3A7OOH8vInODiYemzU2E1UNivq\nWsxgtqItNjDb0GYbmMygTI6vr743mdHKhDKZ8fe2EuDjRYCvN4HeFgJ9bQR6WwnwthLoayXI20qg\nr40gHyuB3lYCL/zraByaTcqlXVOuKv7dqS6xwOk2jwtwtO672icW6LT499SqVat45r+epVVrZ9HW\noMH5P6A1iu5dx+io46Sgh7nMzq+vWKw2rF4+WLx98PIPxntQIj4BQYSEhhERHk5KfAwTxwxl1NAk\nfH19ZcilEJ3wCwwmeXQqyaNTL2zTWlNbdZ7Kc8VUlpVQea6YmsoK6qqrqK+ppK6mmvrSk5zNr6Gq\nqurC63ryt7MdqHB+dYfGWegvFHyFY9PX2x975FGe++/v9SCN6/Rp01Ip9QTwhPNho1Iquy/fv4fC\ngTKjQ3SD5HQtyelakrON55/9Ps8/+/2evny4KzJ0p/ifAdpO9B7n3Hal+6C1fgN4A0ApleWKP116\nm+R0LcnpWpLTtfpDTqWUSy6Wdmdun53AUKVUklLKBtwHfNpun0+Bh5XDZKDycv39QgghjNVly19r\nbVdKPQ2sxNGt/ZbW+qBS6knn868By3CM9MnFMdTz0d6LLIQQ4mp1q89fa70MR4Fvu+21Nt9r4DtX\n+N5vXOH+RpGcriU5XUtyulZ/yOmSjIbd4SuEEMI4Mp+/EEJ4IJcXf6XUW0qpkrbDOJVSoUqp1Uqp\nY85/Qzp57TylVI5SKlcp9YKrs7kw50ml1AGl1F5XXXm/wpz3KKUOKqValVKdjkxwg/PZ3ZxGn8/f\nKKWOKKX2K6WWKKU6XNfSDc5nd3MafT5/7sy4Vym1SikV08lr++R8XmVGQ89lm+f+SymllVLhnbz2\nys+l1tqlX8B1QCqQ3Wbb/wAvOL9/AXi5g9eZgeNAMo57MfYBo1yd72pzOp87CYT3VrZu5ByJY6zv\nBiC9k9e5w/nsMqebnM85gMX5/ctu/PPZZU43OZ+Bbb7/f8BrRp7PnmZ0h3Pp3B6PY8DNqY6y9PRc\nurzlr7XeBJS323wb8Lbz+7eB2zt46SQgV2udp7VuAhY4X9crriJnn+oop9b6sNY6p4uXGn4+u5mz\nT3WSc5XW2u58uA3HfSrtucP57E7OPtVJzqo2D/2gw1vu++x8XkXGPtVJTQL4PfAcnWfs0bnsqz7/\nSP31uP8ioKNVwzubIqIvdScnOP5PWKOU2uW8a9kducP57C53Op+PAcs72O5u57OznOAG51Mp9Uul\n1GngQeDHHexi+PnsRkYw+FwqpW4Dzmit911mtx6dyz6/4Ksdf6cY/inblS5yTtNaTwBuBL6jlLqu\n75INSG5xPpVSL+KYyuVdI96/u7qR0/DzqbV+UWsdjyPj0339/t3RzYyGnUullC/wAzr/YLoqfVX8\ni5VS0QDOf0s62KdbU0T0su7kRGt9xvlvCbAEx59d7sYdzme3uMP5VEo9AtwMPOj84G/PLc5nN3K6\nxfls413grg62u8X5dOoso9HnMgVIAvYppU7iOEe7lVJR7fbr0bnsq+L/KfBvzu//Dfikg326M41E\nb+syp1LKTykV8NX3OC7CueMEde5wPrvkDudTORYreg64VWtd18luhp/P7uR0k/PZdnm524AjHexm\n6PnsTkajz6XW+oDWepDWOlFrnYijOydVa13UbteencteuGL9Po6pnJudYR8HwoC1wDFgDRDq3DcG\nWNbmtTfhWDjmOPBiL19Z71FOHFfU9zm/DhqU8w7n941AMbDSTc9nlznd5Hzm4ugz3ev8es1Nz2eX\nOd3kfH6Eo0juBz4DYo08nz3N6A7nst3zJ3GO9nHFuZQ7fIUQwgPJHb5CCOGBpPgLIYQHkuIvhBAe\nSIq/EEJ4ICn+QgjhgaT4i35NKfWic+bQr2ZozLjMvv9QSt3dxfH+oZQ64TzWbqXUlE72e1Ip9fDV\n5hfCKN1ayUsId+QszDfjuPGl0Tndrc0Fh35Wa71IKTUHeB0Y1+59LbrNSnZC9EdS/EV/Fg2Uaa0b\nAbTWZQBKqR8DtwA+wFbg27rdDS1KqTTgd4A/UAY8or+e1O8rm4Ahzv034LixahrwvvPOzxqt9W+V\nUkOA14AIoAW4R2t9XCn1LPANwAtYorX+iYv/+4XoMen2Ef3ZKiBeKXVUKfWqUmqGc/uftNYTtdZj\ncHwA3Nz2RUopK/B/wN1a6zTgLeCXHRz/FuBAm8c2rXW61vp/2+33LvBnrfV44Fqg0PlXw1Acc8FM\nANJkAkDhTqTlL/otrXWNswU/Hbge+MC5ilG1Uuo5wBcIxXFr/mdtXjocGAOsVkqBYzGMtq3+3yil\nfgiU4pgK4CsftM/g/AsgVmu9xJmpwbl9Do65YPY4d/XH8WGw6Wr+m4VwFSn+ol/TWrfgWClsg1Lq\nAPBtHH306Vrr00qpnwLe7V6mgINa6w4v5uLs8+9ge+0VRFPAS1rr16/gNUL0Gen2Ef2WUmp4u9kZ\nJwBfrRxWppTyBzoa3ZMDRHw1kkcpZVVKje5JBq11NVCglLrdeSwv5zzsK4HHnBlQSsUqpQb15D2E\n6A3S8hf9mT/wf8qxkLkdx6yXTwDncczYWIRjutuLaK2bnEM+/6iUCsLxe/AKju6hnvgm8LpS6mc4\nZmS8R2u9Sik1EvjS2bVUAzxEJ2tECNHXZFZPIYTwQNLtI4QQHkiKvxBCeCAp/kII4YGk+AshhAeS\n4i+EEB5Iir8QQnggKf5CCOGBpPgLIYQH+v8BhKzSpANY6FgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x12755b70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.distplot(train['SalePrice'], fit=norm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\sourav.raj.IN\\AppData\\Local\\conda\\conda\\envs\\python36\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "df.SalePrice[df['source']=='train']=train['SalePrice']\n",
    "#df.ix[df.source == 'train', 'SalePrice'] = train['SalePrice']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>source</th>\n",
       "      <th>Exterior1st_mod</th>\n",
       "      <th>Exterior2nd_mod</th>\n",
       "      <th>GarageYrOld</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2914</th>\n",
       "      <td>2915</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1936</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>2916</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1894</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2916</th>\n",
       "      <td>2917</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>160.0</td>\n",
       "      <td>20000</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2917</th>\n",
       "      <td>2918</td>\n",
       "      <td>85</td>\n",
       "      <td>RL</td>\n",
       "      <td>62.0</td>\n",
       "      <td>10441</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>700</td>\n",
       "      <td>7</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>others</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2918</th>\n",
       "      <td>2919</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>9627</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>25.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 84 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "2914  2915         160       RM         21.0     1936   Pave  None      Reg   \n",
       "2915  2916         160       RM         21.0     1894   Pave  None      Reg   \n",
       "2916  2917          20       RL        160.0    20000   Pave  None      Reg   \n",
       "2917  2918          85       RL         62.0    10441   Pave  None      Reg   \n",
       "2918  2919          60       RL         74.0     9627   Pave  None      Reg   \n",
       "\n",
       "     LandContour Utilities     ...      MiscVal MoSold YrSold SaleType  \\\n",
       "2914         Lvl    AllPub     ...            0      6   2006       WD   \n",
       "2915         Lvl    AllPub     ...            0      4   2006       WD   \n",
       "2916         Lvl    AllPub     ...            0      9   2006       WD   \n",
       "2917         Lvl    AllPub     ...          700      7   2006       WD   \n",
       "2918         Lvl    AllPub     ...            0     11   2006       WD   \n",
       "\n",
       "     SaleCondition SalePrice source  Exterior1st_mod  Exterior2nd_mod  \\\n",
       "2914        Normal       0.0   test           others           others   \n",
       "2915       Abnorml       0.0   test           others           others   \n",
       "2916       Abnorml       0.0   test          VinylSd          VinylSd   \n",
       "2917        Normal       0.0   test          HdBoard           others   \n",
       "2918        Normal       0.0   test          HdBoard          HdBoard   \n",
       "\n",
       "      GarageYrOld  \n",
       "2914         13.0  \n",
       "2915         48.0  \n",
       "2916         58.0  \n",
       "2917         13.0  \n",
       "2918         25.0  \n",
       "\n",
       "[5 rows x 84 columns]"
      ]
     },
     "execution_count": 275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "# tranform some variable which are actually categorical but seems to int\n",
    "for col in ['MSSubClass', 'OverallQual', 'OverallCond', 'YrSold', 'MoSold']:\n",
    "    df[col]=df[col].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "corrmat = df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x14bdbcf8>"
      ]
     },
     "execution_count": 278,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nUWRxW69h6SD3/yXp4RQi60OpngmSts71/15JQ4EvA9+OiOmpnxERN0XEfbl8F6Yg91+QtLmkhyRN\nAb65rO+jmZmZLRvPxBWQNs49nmz/tj2B/5G0I9mAaHqaqftyVZmWlP+OXPL2wEfIAtL/AHgtIt5D\nFgv1hJTnXGBoROwEfCFXtr0g95uktj4MjEwbBeeD3G8MrB0Rk+hckPueKQ7qT4GLgYsiYkfglXoF\nJA1PA8cJf5n7zw6qNzMzM+ucZZ2J2we4PiLmRsRbZDNi76uTd+sUvP5l4NmImJZ77p6ImJM22p0N\n3JLSp5AC2pPFL/2DpOOBhQCSNgQ2jYgHIuIxoIekbXL1VoLcTwf+DWxJFuT+6PT8scC11R2VtH6a\nRXxK0hdzT+WD3O+Ze3xFnddMRIxMA79hH2rZvF42MzMzW0ahxhzNqjvvTq1cE7c5sJekQ3LP5YPe\nt+Uet/HONij/RXY93m7AOEk9yQZh60r6VwpyvykdB7l/FpgtaTvqB7l/JfX1t7Qf5H5V25LGzMys\naXk5tZixwEcltUgaQLYkOpYlg90vISJmAF9JR6ekAdvGKfTWucC6ZAHojwMOyAW5350lB3FHK7MV\n2dLqUyn9mtR+3zSDB1mQ+//NXy9H+0HuHyAty5ItKZuZmZl1m2UaxEXEOLJr0caTBZv/ZURMScui\nD0uaUn1jQ3IdsLak6tip9fQCrpI0mey6tR8B6wODgQm5/jwFzJO0a0p6Pj1/CzA8dyfttcAnyJZW\nK2UfAc5K7UyXdB+wBdkdqrWcDpyZ+jSok6/DzMzMGmRVm4krvFVGRIyoenwB2SxWdb5jqpKG5p4L\nshsJIBv85cttnDv/Te6pWuHXNqnR7k7p9ITq53J5XqBGeMaIuIV3rserfm6fqsf/AN6bS/pavfbM\nzMzMupr3O+tGQfGrI+fPKNdW7/7FAxz3X61c4Oa5s5fa77njttZZWKqtLd/zauEyPSetXaqtx6av\nX7jMe/ate6Nyu9Sz+KT4SyP/Uaqtl+euVarcZjddV7jMNuu9Xaqtl18d0HGmKm/e9mKpthbNL/7e\nP/OlSaXamrZoqb87O1QmkD3AwN9eVrjMW58t11bN3UI70LJGud8Bc2YV/33TWnLRqb+K/x4dvN6b\npdqa/VbfUuVmzm0pXKZfj+KvC2CDtnLlutOqdqG6B3FmZma2UnDsVDMzMzNrep6JMzMzs5VCM9+E\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x14bdb2b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "sns.heatmap(corrmat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [],
   "source": [
    "# total surface area will be more appropriate rather than individual floor area\n",
    "df['TotalSF']=df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [],
   "source": [
    "# let's measure the skewness for each numeric columns\n",
    "numeric_cols = df.dtypes[df.dtypes != \"object\"].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Id', 'LotFrontage', 'LotArea', 'YearBuilt', 'YearRemodAdd',\n",
       "       'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n",
       "       '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath',\n",
       "       'BsmtHalfBath', 'FullBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr',\n",
       "       'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n",
       "       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n",
       "       'MiscVal', 'SalePrice', 'GarageYrOld', 'TotalSF'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 281,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeric_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MiscVal          21.947195\n",
       "PoolArea         16.898328\n",
       "LotArea          12.822431\n",
       "LowQualFinSF     12.088761\n",
       "3SsnPorch        11.376065\n",
       "KitchenAbvGr      4.302254\n",
       "BsmtFinSF2        4.146143\n",
       "EnclosedPorch     4.003891\n",
       "ScreenPorch       3.946694\n",
       "BsmtHalfBath      3.931594\n",
       "MasVnrArea        2.613592\n",
       "OpenPorchSF       2.535114\n",
       "WoodDeckSF        1.842433\n",
       "TotalSF           1.511479\n",
       "LotFrontage       1.505704\n",
       "1stFlrSF          1.469604\n",
       "BsmtFinSF1        1.425230\n",
       "GrLivArea         1.269358\n",
       "TotalBsmtSF       1.156894\n",
       "BsmtUnfSF         0.919339\n",
       "2ndFlrSF          0.861675\n",
       "TotRmsAbvGrd      0.758367\n",
       "Fireplaces        0.733495\n",
       "HalfBath          0.694566\n",
       "BsmtFullBath      0.624832\n",
       "GarageYrOld       0.468511\n",
       "BedroomAbvGr      0.326324\n",
       "GarageArea        0.239257\n",
       "FullBath          0.167606\n",
       "SalePrice         0.005930\n",
       "Id                0.000000\n",
       "GarageCars       -0.218593\n",
       "YearRemodAdd     -0.451020\n",
       "YearBuilt        -0.599806\n",
       "dtype: float64"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "skewness= df[numeric_cols].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\n",
    "skewness"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n",
       "       'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch',\n",
       "       'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF', 'TotalSF',\n",
       "       'LotFrontage', '1stFlrSF', 'BsmtFinSF1', 'GrLivArea', 'TotalBsmtSF',\n",
       "       'BsmtUnfSF', '2ndFlrSF', 'TotRmsAbvGrd'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# we use boxcox transformation for highly skewed columns\n",
    "skew_feature = skewness[abs(skewness)>0.75].index\n",
    "skew_feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.special import boxcox1p\n",
    "lambd=0.15\n",
    "for feature in skew_feature:\n",
    "    df[feature]=boxcox1p(df[feature], lambd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2919, 85)"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['MSSubClass', 'MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour',\n",
       "       'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n",
       "       'Condition2', 'BldgType', 'HouseStyle', 'OverallQual', 'OverallCond',\n",
       "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
       "       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n",
       "       'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Heating', 'HeatingQC',\n",
       "       'CentralAir', 'Electrical', 'KitchenQual', 'Functional', 'FireplaceQu',\n",
       "       'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'PavedDrive',\n",
       "       'PoolQC', 'Fence', 'MiscFeature', 'MoSold', 'YrSold', 'SaleType',\n",
       "       'SaleCondition', 'source', 'Exterior1st_mod', 'Exterior2nd_mod'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 286,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# cat column\n",
    "cat_col = df.dtypes[df.dtypes=='object'].index\n",
    "cat_col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "      <th>source</th>\n",
       "      <th>Exterior1st_mod</th>\n",
       "      <th>Exterior2nd_mod</th>\n",
       "      <th>GarageYrOld</th>\n",
       "      <th>TotalSF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2914</th>\n",
       "      <td>2915</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>3.932510</td>\n",
       "      <td>14.081426</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>6</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.567978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>2916</td>\n",
       "      <td>160</td>\n",
       "      <td>RM</td>\n",
       "      <td>3.932510</td>\n",
       "      <td>14.013314</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>others</td>\n",
       "      <td>others</td>\n",
       "      <td>48.0</td>\n",
       "      <td>13.567978</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2916</th>\n",
       "      <td>2917</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>7.620056</td>\n",
       "      <td>22.782058</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>VinylSd</td>\n",
       "      <td>58.0</td>\n",
       "      <td>14.824355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2917</th>\n",
       "      <td>2918</td>\n",
       "      <td>85</td>\n",
       "      <td>RL</td>\n",
       "      <td>5.744420</td>\n",
       "      <td>20.046557</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>7</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>others</td>\n",
       "      <td>13.0</td>\n",
       "      <td>13.993617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2918</th>\n",
       "      <td>2919</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>6.073289</td>\n",
       "      <td>19.723319</td>\n",
       "      <td>Pave</td>\n",
       "      <td>None</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>11</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>0.0</td>\n",
       "      <td>test</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>HdBoard</td>\n",
       "      <td>25.0</td>\n",
       "      <td>15.485273</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 85 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id MSSubClass MSZoning  LotFrontage    LotArea Street Alley LotShape  \\\n",
       "2914  2915        160       RM     3.932510  14.081426   Pave  None      Reg   \n",
       "2915  2916        160       RM     3.932510  14.013314   Pave  None      Reg   \n",
       "2916  2917         20       RL     7.620056  22.782058   Pave  None      Reg   \n",
       "2917  2918         85       RL     5.744420  20.046557   Pave  None      Reg   \n",
       "2918  2919         60       RL     6.073289  19.723319   Pave  None      Reg   \n",
       "\n",
       "     LandContour Utilities    ...     MoSold YrSold SaleType SaleCondition  \\\n",
       "2914         Lvl    AllPub    ...          6   2006       WD        Normal   \n",
       "2915         Lvl    AllPub    ...          4   2006       WD       Abnorml   \n",
       "2916         Lvl    AllPub    ...          9   2006       WD       Abnorml   \n",
       "2917         Lvl    AllPub    ...          7   2006       WD        Normal   \n",
       "2918         Lvl    AllPub    ...         11   2006       WD        Normal   \n",
       "\n",
       "     SalePrice source Exterior1st_mod Exterior2nd_mod GarageYrOld    TotalSF  \n",
       "2914       0.0   test          others          others        13.0  13.567978  \n",
       "2915       0.0   test          others          others        48.0  13.567978  \n",
       "2916       0.0   test         VinylSd         VinylSd        58.0  14.824355  \n",
       "2917       0.0   test         HdBoard          others        13.0  13.993617  \n",
       "2918       0.0   test         HdBoard         HdBoard        25.0  15.485273  \n",
       "\n",
       "[5 rows x 85 columns]"
      ]
     },
     "execution_count": 288,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.get_dummies(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2919, 364)"
      ]
     },
     "execution_count": 290,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <th>...</th>\n",
       "      <th>Exterior1st_mod_HdBoard</th>\n",
       "      <th>Exterior1st_mod_MetalSd</th>\n",
       "      <th>Exterior1st_mod_VinylSd</th>\n",
       "      <th>Exterior1st_mod_Wd Sdng</th>\n",
       "      <th>Exterior1st_mod_others</th>\n",
       "      <th>Exterior2nd_mod_HdBoard</th>\n",
       "      <th>Exterior2nd_mod_MetalSd</th>\n",
       "      <th>Exterior2nd_mod_VinylSd</th>\n",
       "      <th>Exterior2nd_mod_Wd Sdng</th>\n",
       "      <th>Exterior2nd_mod_others</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2914</th>\n",
       "      <td>2915</td>\n",
       "      <td>3.932510</td>\n",
       "      <td>14.081426</td>\n",
       "      <td>1970</td>\n",
       "      <td>1970</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.496872</td>\n",
       "      <td>10.496872</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2915</th>\n",
       "      <td>2916</td>\n",
       "      <td>3.932510</td>\n",
       "      <td>14.013314</td>\n",
       "      <td>1970</td>\n",
       "      <td>1970</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.622254</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.978567</td>\n",
       "      <td>10.496872</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2916</th>\n",
       "      <td>2917</td>\n",
       "      <td>7.620056</td>\n",
       "      <td>22.782058</td>\n",
       "      <td>1960</td>\n",
       "      <td>1996</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.703313</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>12.703313</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2917</th>\n",
       "      <td>2918</td>\n",
       "      <td>5.744420</td>\n",
       "      <td>20.046557</td>\n",
       "      <td>1992</td>\n",
       "      <td>1992</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9.301176</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.630386</td>\n",
       "      <td>11.867769</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2918</th>\n",
       "      <td>2919</td>\n",
       "      <td>6.073289</td>\n",
       "      <td>19.723319</td>\n",
       "      <td>1993</td>\n",
       "      <td>1994</td>\n",
       "      <td>6.533131</td>\n",
       "      <td>11.361228</td>\n",
       "      <td>0.0</td>\n",
       "      <td>8.492259</td>\n",
       "      <td>12.114087</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 364 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Id  LotFrontage    LotArea  YearBuilt  YearRemodAdd  MasVnrArea  \\\n",
       "2914  2915     3.932510  14.081426       1970          1970    0.000000   \n",
       "2915  2916     3.932510  14.013314       1970          1970    0.000000   \n",
       "2916  2917     7.620056  22.782058       1960          1996    0.000000   \n",
       "2917  2918     5.744420  20.046557       1992          1992    0.000000   \n",
       "2918  2919     6.073289  19.723319       1993          1994    6.533131   \n",
       "\n",
       "      BsmtFinSF1  BsmtFinSF2  BsmtUnfSF  TotalBsmtSF           ...            \\\n",
       "2914    0.000000         0.0  10.496872    10.496872           ...             \n",
       "2915    8.622254         0.0   8.978567    10.496872           ...             \n",
       "2916   12.703313         0.0   0.000000    12.703313           ...             \n",
       "2917    9.301176         0.0  10.630386    11.867769           ...             \n",
       "2918   11.361228         0.0   8.492259    12.114087           ...             \n",
       "\n",
       "      Exterior1st_mod_HdBoard  Exterior1st_mod_MetalSd  \\\n",
       "2914                        0                        0   \n",
       "2915                        0                        0   \n",
       "2916                        0                        0   \n",
       "2917                        1                        0   \n",
       "2918                        1                        0   \n",
       "\n",
       "      Exterior1st_mod_VinylSd  Exterior1st_mod_Wd Sdng  \\\n",
       "2914                        0                        0   \n",
       "2915                        0                        0   \n",
       "2916                        1                        0   \n",
       "2917                        0                        0   \n",
       "2918                        0                        0   \n",
       "\n",
       "      Exterior1st_mod_others  Exterior2nd_mod_HdBoard  \\\n",
       "2914                       1                        0   \n",
       "2915                       1                        0   \n",
       "2916                       0                        0   \n",
       "2917                       0                        0   \n",
       "2918                       0                        1   \n",
       "\n",
       "      Exterior2nd_mod_MetalSd  Exterior2nd_mod_VinylSd  \\\n",
       "2914                        0                        0   \n",
       "2915                        0                        0   \n",
       "2916                        0                        1   \n",
       "2917                        0                        0   \n",
       "2918                        0                        0   \n",
       "\n",
       "      Exterior2nd_mod_Wd Sdng  Exterior2nd_mod_others  \n",
       "2914                        0                       1  \n",
       "2915                        0                       1  \n",
       "2916                        0                       0  \n",
       "2917                        0                       1  \n",
       "2918                        0                       0  \n",
       "\n",
       "[5 rows x 364 columns]"
      ]
     },
     "execution_count": 291,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1460"
      ]
     },
     "execution_count": 292,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_train=df[:train.shape[0]]\n",
    "df_test=df[train.shape[0]:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1460, 364)"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 364)"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import KFold, cross_val_score\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.tree import DecisionTreeRegressor, export_graphviz\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [],
   "source": [
    "def reg_model(model, train, predictors, outcome):\n",
    "    kfold=KFold(n_splits=5, random_state=5)\n",
    "    scoring='r2'\n",
    "    X=np.array(train[predictor])\n",
    "    Y=np.array(train[outcome])\n",
    "    cv_score = cross_val_score(model, X, Y, cv=kfold, scoring=scoring)\n",
    "    print('cv_score_mean: ', cv_score.mean(), 'cv_score_std: ', cv_score.std())\n",
    "    model.fit(X, Y)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -2.00118072e-17,  -5.95235597e-02,  -4.61059782e-02,\n",
       "         8.67010371e-02,  -8.96035173e-03,   1.70369505e-01,\n",
       "        -1.03630912e-01,   5.18456146e-03,   1.58083046e-02,\n",
       "        -1.40506026e-02,  -1.75259159e-03,   1.50379518e-02,\n",
       "         7.67462873e-02,   1.87534111e-01,  -1.72887472e-01,\n",
       "         2.85874396e-03,   2.68064684e-01,   5.15934102e-02,\n",
       "        -4.45470663e-02,   2.73045134e-03,  -1.12527116e-03,\n",
       "         8.72569227e-02,   1.06371811e-01,   3.32896511e-02,\n",
       "         1.06671039e-02,   3.70660691e-01,  -7.65810093e-03,\n",
       "        -2.38822930e-01,  -7.43046515e-03,  -2.73011559e-02,\n",
       "         1.01057679e-02,   2.48542087e-02,   2.49351873e-02,\n",
       "         1.16081775e-01,   2.85411907e-02,   7.46606215e-03,\n",
       "         4.97370042e-02,   3.99963522e-02,   2.32237877e-02,\n",
       "        -2.68160375e-02,  -6.00903243e-02,   1.03925596e-01,\n",
       "        -4.04846796e-02,   1.85218603e-03,  -1.07557641e-02,\n",
       "         1.01428376e-02,   3.16600150e-02,   3.24158534e-02,\n",
       "         1.13535072e-01])"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.nam"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.80011357812 cv_score_std:  0.0456932047275\n"
     ]
    }
   ],
   "source": [
    "#taking top 10 highle correlated column\n",
    "cols = df.corr().nlargest(50, 'SalePrice').index\n",
    "predictor=cols.drop('SalePrice')\n",
    "outcome='SalePrice'\n",
    "model=LinearRegression()\n",
    "reg_model(model, df_train, predictor, outcome)\n",
    "y_pred = model.predict(np.array(df_test[predictor]))\n",
    "df_pred=pd.DataFrame()\n",
    "df_pred['Id']=df_test['Id']\n",
    "df_pred['SalePrice']=np.expm1(y_pred)\n",
    "df_pred.to_csv('pred_Lin_reg.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -2.00118072e-17,  -5.95235597e-02,  -4.61059782e-02,\n",
       "         8.67010371e-02,  -8.96035173e-03,   1.70369505e-01,\n",
       "        -1.03630912e-01,   5.18456146e-03,   1.58083046e-02,\n",
       "        -1.40506026e-02,  -1.75259159e-03,   1.50379518e-02,\n",
       "         7.67462873e-02,   1.87534111e-01,  -1.72887472e-01,\n",
       "         2.85874396e-03,   2.68064684e-01,   5.15934102e-02,\n",
       "        -4.45470663e-02,   2.73045134e-03,  -1.12527116e-03,\n",
       "         8.72569227e-02,   1.06371811e-01,   3.32896511e-02,\n",
       "         1.06671039e-02,   3.70660691e-01,  -7.65810093e-03,\n",
       "        -2.38822930e-01,  -7.43046515e-03,  -2.73011559e-02,\n",
       "         1.01057679e-02,   2.48542087e-02,   2.49351873e-02,\n",
       "         1.16081775e-01,   2.85411907e-02,   7.46606215e-03,\n",
       "         4.97370042e-02,   3.99963522e-02,   2.32237877e-02,\n",
       "        -2.68160375e-02,  -6.00903243e-02,   1.03925596e-01,\n",
       "        -4.04846796e-02,   1.85218603e-03,  -1.07557641e-02,\n",
       "         1.01428376e-02,   3.16600150e-02,   3.24158534e-02,\n",
       "         1.13535072e-01])"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.coef_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.82399854488 cv_score_std:  0.0119841033433\n"
     ]
    }
   ],
   "source": [
    "model = RandomForestRegressor(n_estimators=200)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.8533652865 cv_score_std:  0.0123775157932\n"
     ]
    }
   ],
   "source": [
    "cols = df.corr().nlargest(100, 'SalePrice').index\n",
    "predictor=cols.drop('SalePrice')\n",
    "outcome='SalePrice'\n",
    "model = RandomForestRegressor(n_estimators=200)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.865824061349 cv_score_std:  0.0110633119269\n"
     ]
    }
   ],
   "source": [
    "cols = df.columns\n",
    "predictor=cols.drop('SalePrice')\n",
    "outcome='SalePrice'\n",
    "model = RandomForestRegressor(n_estimators=200)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "imp_feature=pd.Series(model.feature_importances_, index=predictor).sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [],
   "source": [
    "predictor=imp_feature[1:51].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.865039285349 cv_score_std:  0.00606573112306\n"
     ]
    }
   ],
   "source": [
    "model = RandomForestRegressor(n_estimators=200)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['YearBuilt', 'ExterQual_TA', 'GarageCars', 'YearRemodAdd', 'GarageArea',\n",
       "       'GrLivArea', 'LotArea', 'CentralAir_Y', 'CentralAir_N',\n",
       "       'KitchenQual_TA', 'BsmtFinSF1', 'BsmtUnfSF', '1stFlrSF', 'LotFrontage',\n",
       "       '2ndFlrSF', 'KitchenAbvGr', 'BsmtQual_Ex', 'TotalBsmtSF', 'Id',\n",
       "       'GarageYrOld', 'MSZoning_C (all)', 'OpenPorchSF', 'Fireplaces',\n",
       "       'GarageCond_TA', 'KitchenQual_Ex', 'OverallCond_3', 'OverallQual_5',\n",
       "       'FullBath', 'WoodDeckSF', 'Neighborhood_OldTown', 'FireplaceQu_None',\n",
       "       'KitchenQual_Gd', 'GarageQual_TA', 'TotRmsAbvGrd', 'MasVnrArea',\n",
       "       'OverallQual_4', 'BedroomAbvGr', 'EnclosedPorch',\n",
       "       'Neighborhood_Crawfor', 'OverallQual_7', 'Functional_Typ',\n",
       "       'OverallQual_8', 'MSSubClass_30', 'ExterCond_Fa',\n",
       "       'SaleCondition_Abnorml', 'GarageType_Detchd', 'OverallQual_6',\n",
       "       'MSZoning_RL', 'OverallCond_4', 'SaleCondition_Family'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-196-7d34b4cf7dc3>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-196-7d34b4cf7dc3>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    predictor.del['TotalBsmtSF']\u001b[0m\n\u001b[1;37m                ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "predictors = [x for x in predictor if x not in ['TotalBsmtSF', '1stFlrSF', '2ndFlrSF']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(np.array(df_test[predictor]))\n",
    "df_pred=pd.DataFrame()\n",
    "df_pred['Id']=df_test['Id']\n",
    "df_pred['SalePrice']=np.expm1(y_pred)\n",
    "df_pred.to_csv('RF_reg.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Gradient Boost "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import  GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.899772153032 cv_score_std:  0.0146374704625\n"
     ]
    }
   ],
   "source": [
    "model = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n",
    "                                  max_depth=4, max_features='sqrt',\n",
    "                                  min_samples_leaf=15, min_samples_split=10,\n",
    "                                  loss='huber', random_state=5)\n",
    "\n",
    "cols = df.columns\n",
    "predictor=cols.drop('SalePrice')\n",
    "outcome='SalePrice'\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "imp_feature=pd.Series(model.feature_importances_, index=predictor).sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.868268525886 cv_score_std:  0.0150838066552\n"
     ]
    }
   ],
   "source": [
    "predictor=imp_feature[1:51].index\n",
    "model = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n",
    "                                  max_depth=4, max_features='sqrt',\n",
    "                                  min_samples_leaf=15, min_samples_split=10,\n",
    "                                  loss='huber', random_state=5)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(np.array(df_test[predictor]))\n",
    "df_pred=pd.DataFrame()\n",
    "df_pred['Id']=df_test['Id']\n",
    "df_pred['SalePrice']=np.expm1(y_pred)\n",
    "df_pred.to_csv('gboost_reg.csv', index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "XgBoost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.901890574798 cv_score_std:  0.0107927517054\n"
     ]
    }
   ],
   "source": [
    "model = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n",
    "                             learning_rate=0.05, max_depth=3, \n",
    "                             min_child_weight=1.7817, n_estimators=2200,\n",
    "                             reg_alpha=0.4640, reg_lambda=0.8571,\n",
    "                             subsample=0.5213, silent=1, nthread = -1)\n",
    "cols = df.columns\n",
    "predictor=cols.drop(['SalePrice', 'Id'])\n",
    "outcome='SalePrice'\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 348,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.902674795725 cv_score_std:  0.0105113348013\n"
     ]
    }
   ],
   "source": [
    "imp_feature=pd.Series(model.feature_importances_, index=predictor).sort_values(ascending=False)\n",
    "predictor=imp_feature[0:50].index\n",
    "model = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n",
    "                             learning_rate=0.05, max_depth=3, \n",
    "                             min_child_weight=1.7817, n_estimators=2200,\n",
    "                             reg_alpha=0.4640, reg_lambda=0.8571,\n",
    "                             subsample=0.5213, silent=1, nthread = -1)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 349,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(np.array(df_test[predictor]))\n",
    "df_pred=pd.DataFrame()\n",
    "df_pred['Id']=df_test['Id']\n",
    "df_pred['SalePrice']=np.expm1(y_pred)\n",
    "df_pred.to_csv('xgboost_reg.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.899180457786 cv_score_std:  0.00848684642325\n"
     ]
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "model = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n",
    "                              learning_rate=0.05, n_estimators=720,\n",
    "                              max_bin = 55, bagging_fraction = 0.8,\n",
    "                              bagging_freq = 5, feature_fraction = 0.2319,\n",
    "                              feature_fraction_seed=9, bagging_seed=9,\n",
    "                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n",
    "cols = df.columns\n",
    "predictor=cols.drop(['SalePrice', 'Id'])\n",
    "outcome='SalePrice'\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 351,
   "metadata": {},
   "outputs": [],
   "source": [
    "imp_feature=pd.Series(model.feature_importances_, index=predictor).sort_values(ascending=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cv_score_mean:  0.901249624862 cv_score_std:  0.00800801843448\n"
     ]
    }
   ],
   "source": [
    "predictor=imp_feature[0:70].index\n",
    "model = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n",
    "                              learning_rate=0.05, n_estimators=720,\n",
    "                              max_bin = 55, bagging_fraction = 0.8,\n",
    "                              bagging_freq = 5, feature_fraction = 0.2319,\n",
    "                              feature_fraction_seed=9, bagging_seed=9,\n",
    "                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n",
    "reg_model(model, df_train, predictor, outcome)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(np.array(df_test[predictor]))\n",
    "df_pred=pd.DataFrame()\n",
    "df_pred['Id']=df_test['Id']\n",
    "df_pred['SalePrice']=np.expm1(y_pred)\n",
    "df_pred.to_csv('lgboost_reg.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
